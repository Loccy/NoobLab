// Generated by CoffeeScript 1.3.3
(function() {
  var JavaArray, JavaException, JavaObject, ReturnException, c2t, gLong, java_throw, jsr, root, types, util, _ref, _ref1,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  gLong = require('../vendor/gLong.js');

  util = require('./util');

  types = require('./types');

  _ref = require('./exceptions'), java_throw = _ref.java_throw, ReturnException = _ref.ReturnException, JavaException = _ref.JavaException;

  c2t = types.c2t;

  _ref1 = require('./java_object'), JavaObject = _ref1.JavaObject, JavaArray = _ref1.JavaArray;

  "use strict";


  root = typeof exports !== "undefined" && exports !== null ? exports : window.opcodes = {};

  root.Opcode = (function() {

    function Opcode(name, params) {
      var prop, val, _ref2, _ref3;
      this.name = name;
      if (params == null) {
        params = {};
      }
      for (prop in params) {
        val = params[prop];
        this[prop] = val;
      }
      if ((_ref2 = this.execute) == null) {
        this.execute = this._execute;
      }
      this.byte_count = (_ref3 = params.byte_count) != null ? _ref3 : 0;
    }

    Opcode.prototype.take_args = function(code_array) {
      return this.args = (function() {
        var _i, _ref2, _results;
        _results = [];
        for (_i = 0, _ref2 = this.byte_count; 0 <= _ref2 ? _i < _ref2 : _i > _ref2; 0 <= _ref2 ? _i++ : _i--) {
          _results.push(code_array.get_uint(1));
        }
        return _results;
      }).call(this);
    };

    Opcode.prototype.annotate = function() {
      return '';
    };

    return Opcode;

  })();

  root.FieldOpcode = (function(_super) {

    __extends(FieldOpcode, _super);

    function FieldOpcode(name, params) {
      FieldOpcode.__super__.constructor.call(this, name, params);
      this.byte_count = 2;
    }

    FieldOpcode.prototype.take_args = function(code_array, constant_pool) {
      this.field_spec_ref = code_array.get_uint(2);
      return this.field_spec = constant_pool.get(this.field_spec_ref).deref();
    };

    FieldOpcode.prototype.annotate = function(idx, pool) {
      return "\t#" + this.field_spec_ref + ";" + (util.format_extra_info(pool.get(this.field_spec_ref)));
    };

    return FieldOpcode;

  })(root.Opcode);

  root.ClassOpcode = (function(_super) {

    __extends(ClassOpcode, _super);

    function ClassOpcode(name, params) {
      ClassOpcode.__super__.constructor.call(this, name, params);
      this.byte_count = 2;
    }

    ClassOpcode.prototype.take_args = function(code_array, constant_pool) {
      this.class_ref = code_array.get_uint(2);
      return this["class"] = constant_pool.get(this.class_ref).deref();
    };

    ClassOpcode.prototype.annotate = function(idx, pool) {
      return "\t#" + this.class_ref + ";" + (util.format_extra_info(pool.get(this.class_ref)));
    };

    return ClassOpcode;

  })(root.Opcode);

  root.InvokeOpcode = (function(_super) {

    __extends(InvokeOpcode, _super);

    function InvokeOpcode(name, params) {
      InvokeOpcode.__super__.constructor.call(this, name, params);
      this.byte_count = 2;
    }

    InvokeOpcode.prototype.take_args = function(code_array, constant_pool) {
      this.method_spec_ref = code_array.get_uint(2);
      return this.method_spec = constant_pool.get(this.method_spec_ref).deref();
    };

    InvokeOpcode.prototype.annotate = function(idx, pool) {
      return ("\t#" + this.method_spec_ref) + (this.name === 'invokeinterface' ? ",  " + this.count : "") + (";" + (util.format_extra_info(pool.get(this.method_spec_ref))));
    };

    InvokeOpcode.prototype.execute = function(rs) {
      var my_sf;
      my_sf = rs.curr_frame();
      if (rs.method_lookup(this.method_spec).setup_stack(rs) != null) {
        my_sf.pc += 1 + this.byte_count;
        throw ReturnException;
      }
    };

    return InvokeOpcode;

  })(root.Opcode);

  root.DynInvokeOpcode = (function(_super) {
    var get_param_word_size;

    __extends(DynInvokeOpcode, _super);

    function DynInvokeOpcode(name, params) {
      DynInvokeOpcode.__super__.constructor.call(this, name, params);
      this.byte_count = 2;
    }

    DynInvokeOpcode.prototype.take_args = function(code_array, constant_pool) {
      DynInvokeOpcode.__super__.take_args.call(this, code_array, constant_pool);
      if (this.name === 'invokeinterface') {
        this.count = code_array.get_uint(1);
        code_array.skip(1);
        this.byte_count += 2;
      } else {
        this.count = 1 + get_param_word_size(this.method_spec.sig);
      }
      return this.cache = Object.create(null);
    };

    DynInvokeOpcode.prototype.execute = function(rs) {
      var cls, my_sf, obj, stack;
      my_sf = rs.curr_frame();
      stack = my_sf.stack;
      obj = stack[stack.length - this.count];
      cls = rs.check_null(obj).type.toClassString();
      if (rs.method_lookup({
        "class": cls,
        sig: this.method_spec.sig
      }).setup_stack(rs) != null) {
        my_sf.pc += 1 + this.byte_count;
        throw ReturnException;
      }
    };

    get_param_word_size = function(spec) {
      var c, size, state, _i, _len;
      state = 'name';
      size = 0;
      for (_i = 0, _len = spec.length; _i < _len; _i++) {
        c = spec[_i];
        switch (state) {
          case 'name':
            if (c === '(') {
              state = 'type';
            }
            break;
          case 'type':
            if (c === ')') {
              return size;
            }
            if (c === 'J' || c === 'D') {
              size += 2;
            } else {
              ++size;
            }
            if (c === 'L') {
              state = 'class';
            } else if (c === '[') {
              state = 'array';
            }
            break;
          case 'class':
            if (c === ';') {
              state = 'type';
            }
            break;
          case 'array':
            if (c === 'L') {
              state = 'class';
            } else if (c !== '[') {
              state = 'type';
            }
        }
      }
    };

    return DynInvokeOpcode;

  })(root.InvokeOpcode);

  root.LoadConstantOpcode = (function(_super) {

    __extends(LoadConstantOpcode, _super);

    function LoadConstantOpcode() {
      return LoadConstantOpcode.__super__.constructor.apply(this, arguments);
    }

    LoadConstantOpcode.prototype.take_args = function(code_array, constant_pool) {
      var _ref2;
      this.cls = constant_pool.cls;
      this.constant_ref = code_array.get_uint(this.byte_count);
      this.constant = constant_pool.get(this.constant_ref);
      if ((_ref2 = this.constant.type) === 'String' || _ref2 === 'class') {
        return this.str_constant = constant_pool.get(this.constant.value);
      }
    };

    LoadConstantOpcode.prototype.annotate = function(idx, pool) {
      var _ref2;
      return ("\t#" + this.constant_ref + ";\t// " + this.constant.type + " ") + ((_ref2 = this.constant.type) === 'String' || _ref2 === 'class' ? util.escape_whitespace(this.constant.deref()) : this.constant.value);
    };

    LoadConstantOpcode.prototype._execute = function(rs) {
      switch (this.constant.type) {
        case 'String':
          rs.push(rs.init_string(this.str_constant.value, true));
          break;
        case 'class':
          rs.push(rs.jclass_obj(c2t(this.str_constant.value), false));
          break;
        default:
          rs.push(this.constant.value);
      }
    };

    return LoadConstantOpcode;

  })(root.Opcode);

  root.BranchOpcode = (function(_super) {

    __extends(BranchOpcode, _super);

    function BranchOpcode(name, params) {
      var _ref2;
      if (params == null) {
        params = {};
      }
      if ((_ref2 = params.byte_count) == null) {
        params.byte_count = 2;
      }
      BranchOpcode.__super__.constructor.call(this, name, params);
    }

    BranchOpcode.prototype.take_args = function(code_array) {
      return this.offset = code_array.get_int(this.byte_count);
    };

    BranchOpcode.prototype.annotate = function(idx, pool) {
      return "\t" + (idx + this.offset);
    };

    return BranchOpcode;

  })(root.Opcode);

  root.UnaryBranchOpcode = (function(_super) {

    __extends(UnaryBranchOpcode, _super);

    function UnaryBranchOpcode(name, params) {
      UnaryBranchOpcode.__super__.constructor.call(this, name, {
        execute: function(rs) {
          var v;
          v = rs.pop();
          if (params.cmp(v)) {
            rs.inc_pc(this.offset);
            return false;
          } else {
            return true;
          }
        }
      });
    }

    return UnaryBranchOpcode;

  })(root.BranchOpcode);

  root.BinaryBranchOpcode = (function(_super) {

    __extends(BinaryBranchOpcode, _super);

    function BinaryBranchOpcode(name, params) {
      BinaryBranchOpcode.__super__.constructor.call(this, name, {
        execute: function(rs) {
          var v1, v2;
          v2 = rs.pop();
          v1 = rs.pop();
          if (params.cmp(v1, v2)) {
            rs.inc_pc(this.offset);
            return false;
          } else {
            return true;
          }
        }
      });
    }

    return BinaryBranchOpcode;

  })(root.BranchOpcode);

  root.PushOpcode = (function(_super) {

    __extends(PushOpcode, _super);

    function PushOpcode() {
      return PushOpcode.__super__.constructor.apply(this, arguments);
    }

    PushOpcode.prototype.take_args = function(code_array) {
      return this.value = code_array.get_int(this.byte_count);
    };

    PushOpcode.prototype.annotate = function(idx, pool) {
      return "\t" + this.value;
    };

    PushOpcode.prototype._execute = function(rs) {
      return rs.push(this.value);
    };

    return PushOpcode;

  })(root.Opcode);

  root.IIncOpcode = (function(_super) {

    __extends(IIncOpcode, _super);

    function IIncOpcode(name, params) {
      IIncOpcode.__super__.constructor.call(this, name, params);
    }

    IIncOpcode.prototype.take_args = function(code_array, constant_pool, wide) {
      var arg_size;
      this.wide = wide != null ? wide : false;
      if (this.wide) {
        this.name += "_w";
        arg_size = 2;
        this.byte_count = 5;
      } else {
        arg_size = 1;
        this.byte_count = 2;
      }
      this.index = code_array.get_uint(arg_size);
      return this["const"] = code_array.get_int(arg_size);
    };

    IIncOpcode.prototype.annotate = function(idx, pool) {
      return "\t" + this.index + ", " + this["const"];
    };

    IIncOpcode.prototype._execute = function(rs) {
      var v;
      v = rs.cl(this.index) + this["const"];
      return rs.put_cl(this.index, v | 0);
    };

    return IIncOpcode;

  })(root.Opcode);

  root.LoadOpcode = (function(_super) {

    __extends(LoadOpcode, _super);

    function LoadOpcode(name, params) {
      var _ref2;
      if (params == null) {
        params = {};
      }
      if ((_ref2 = params.execute) == null) {
        params.execute = name.match(/[ld]load/) ? function(rs) {
          return rs.push2(rs.cl(this.var_num), null);
        } : function(rs) {
          return rs.push(rs.cl(this.var_num));
        };
      }
      LoadOpcode.__super__.constructor.call(this, name, params);
    }

    LoadOpcode.prototype.take_args = function(code_array) {
      return this.var_num = parseInt(this.name[6]);
    };

    return LoadOpcode;

  })(root.Opcode);

  root.LoadVarOpcode = (function(_super) {

    __extends(LoadVarOpcode, _super);

    function LoadVarOpcode() {
      return LoadVarOpcode.__super__.constructor.apply(this, arguments);
    }

    LoadVarOpcode.prototype.take_args = function(code_array, constant_pool, wide) {
      this.wide = wide != null ? wide : false;
      if (this.wide) {
        this.name += "_w";
        this.byte_count = 3;
        return this.var_num = code_array.get_uint(2);
      } else {
        this.byte_count = 1;
        return this.var_num = code_array.get_uint(1);
      }
    };

    LoadVarOpcode.prototype.annotate = function(idx, pool) {
      return "\t" + this.var_num;
    };

    return LoadVarOpcode;

  })(root.LoadOpcode);

  root.StoreOpcode = (function(_super) {

    __extends(StoreOpcode, _super);

    function StoreOpcode(name, params) {
      var _ref2;
      if (params == null) {
        params = {};
      }
      if ((_ref2 = params.execute) == null) {
        params.execute = name.match(/[ld]store/) ? function(rs) {
          return rs.put_cl2(this.var_num, rs.pop2());
        } : function(rs) {
          return rs.put_cl(this.var_num, rs.pop());
        };
      }
      StoreOpcode.__super__.constructor.call(this, name, params);
    }

    StoreOpcode.prototype.take_args = function(code_array) {
      return this.var_num = parseInt(this.name[7]);
    };

    return StoreOpcode;

  })(root.Opcode);

  root.StoreVarOpcode = (function(_super) {

    __extends(StoreVarOpcode, _super);

    function StoreVarOpcode(name, params) {
      StoreVarOpcode.__super__.constructor.call(this, name, params);
    }

    StoreVarOpcode.prototype.take_args = function(code_array, constant_pool, wide) {
      this.wide = wide != null ? wide : false;
      if (this.wide) {
        this.name += "_w";
        this.byte_count = 3;
        return this.var_num = code_array.get_uint(2);
      } else {
        this.byte_count = 1;
        return this.var_num = code_array.get_uint(1);
      }
    };

    StoreVarOpcode.prototype.annotate = function(idx, pool) {
      return "\t" + this.var_num;
    };

    return StoreVarOpcode;

  })(root.StoreOpcode);

  root.SwitchOpcode = (function(_super) {

    __extends(SwitchOpcode, _super);

    function SwitchOpcode(name, params) {
      SwitchOpcode.__super__.constructor.call(this, name, params);
      this.byte_count = null;
    }

    SwitchOpcode.prototype.annotate = function(idx, pool) {
      var match, offset;
      return "{\n" + ((function() {
        var _ref2, _results;
        _ref2 = this.offsets;
        _results = [];
        for (match in _ref2) {
          offset = _ref2[match];
          _results.push("\t\t" + match + ": " + (idx + offset) + ";\n");
        }
        return _results;
      }).call(this)).join('') + ("\t\tdefault: " + (idx + this._default) + " }");
    };

    SwitchOpcode.prototype.execute = function(rs) {
      var key;
      key = rs.pop();
      if (key in this.offsets) {
        rs.inc_pc(this.offsets[key]);
      } else {
        rs.inc_pc(this._default);
      }
      return false;
    };

    return SwitchOpcode;

  })(root.BranchOpcode);

  root.LookupSwitchOpcode = (function(_super) {

    __extends(LookupSwitchOpcode, _super);

    function LookupSwitchOpcode() {
      return LookupSwitchOpcode.__super__.constructor.apply(this, arguments);
    }

    LookupSwitchOpcode.prototype.take_args = function(code_array, constant_pool) {
      var i, match, offset, padding_size, _i, _ref2;
      padding_size = (4 - code_array.pos() % 4) % 4;
      code_array.skip(padding_size);
      this._default = code_array.get_int(4);
      this.npairs = code_array.get_int(4);
      this.offsets = {};
      for (i = _i = 0, _ref2 = this.npairs; _i < _ref2; i = _i += 1) {
        match = code_array.get_int(4);
        offset = code_array.get_int(4);
        this.offsets[match] = offset;
      }
      return this.byte_count = padding_size + 8 * (this.npairs + 1);
    };

    return LookupSwitchOpcode;

  })(root.SwitchOpcode);

  root.TableSwitchOpcode = (function(_super) {

    __extends(TableSwitchOpcode, _super);

    function TableSwitchOpcode() {
      return TableSwitchOpcode.__super__.constructor.apply(this, arguments);
    }

    TableSwitchOpcode.prototype.take_args = function(code_array, constant_pool) {
      var i, offset, padding_size, total_offsets, _i;
      padding_size = (4 - code_array.pos() % 4) % 4;
      code_array.skip(padding_size);
      this._default = code_array.get_int(4);
      this.low = code_array.get_int(4);
      this.high = code_array.get_int(4);
      this.offsets = {};
      total_offsets = this.high - this.low + 1;
      for (i = _i = 0; _i < total_offsets; i = _i += 1) {
        offset = code_array.get_int(4);
        this.offsets[this.low + i] = offset;
      }
      return this.byte_count = padding_size + 12 + 4 * total_offsets;
    };

    return TableSwitchOpcode;

  })(root.SwitchOpcode);

  root.NewArrayOpcode = (function(_super) {

    __extends(NewArrayOpcode, _super);

    function NewArrayOpcode(name, params) {
      NewArrayOpcode.__super__.constructor.call(this, name, params);
      this.byte_count = 1;
      this.arr_types = {
        4: 'Z',
        5: 'C',
        6: 'F',
        7: 'D',
        8: 'B',
        9: 'S',
        10: 'I',
        11: 'J'
      };
    }

    NewArrayOpcode.prototype.take_args = function(code_array, constant_pool) {
      var type_code;
      type_code = code_array.get_uint(1);
      return this.element_type = this.arr_types[type_code];
    };

    NewArrayOpcode.prototype.annotate = function(idx, pool) {
      return "\t" + types.internal2external[this.element_type];
    };

    return NewArrayOpcode;

  })(root.Opcode);

  root.MultiArrayOpcode = (function(_super) {

    __extends(MultiArrayOpcode, _super);

    function MultiArrayOpcode(name, params) {
      var _ref2;
      if (params == null) {
        params = {};
      }
      if ((_ref2 = params.byte_count) == null) {
        params.byte_count = 3;
      }
      MultiArrayOpcode.__super__.constructor.call(this, name, params);
    }

    MultiArrayOpcode.prototype.take_args = function(code_array, constant_pool) {
      this.class_ref = code_array.get_uint(2);
      this["class"] = constant_pool.get(this.class_ref).deref();
      return this.dim = code_array.get_uint(1);
    };

    MultiArrayOpcode.prototype.annotate = function(idx, pool) {
      return "\t#" + this.class_ref + ",  " + this.dim + ";";
    };

    MultiArrayOpcode.prototype.execute = function(rs) {
      var arr_types, counts, d, default_val, init_arr,
        _this = this;
      counts = rs.curr_frame().stack.splice(-this.dim, this.dim);
      default_val = util.initial_value(this["class"].slice(this.dim));
      arr_types = (function() {
        var _i, _ref2, _results;
        _results = [];
        for (d = _i = 0, _ref2 = this.dim; _i < _ref2; d = _i += 1) {
          _results.push(c2t(this["class"].slice(d)));
        }
        return _results;
      }).call(this);
      init_arr = function(curr_dim) {
        var array, i, len, type;
        len = counts[curr_dim];
        if (len < 0) {
          java_throw(rs, 'java/lang/NegativeArraySizeException', "Tried to init dimension " + curr_dim + " of a " + _this.dim + " dimensional " + (_this["class"].toString()) + " array with length " + len);
        }
        type = arr_types[curr_dim];
        if (curr_dim + 1 === _this.dim) {
          array = (function() {
            var _i, _results;
            _results = [];
            for (i = _i = 0; _i < len; i = _i += 1) {
              _results.push(default_val);
            }
            return _results;
          })();
        } else {
          array = (function() {
            var _i, _results;
            _results = [];
            for (i = _i = 0; _i < len; i = _i += 1) {
              _results.push(init_arr(curr_dim + 1));
            }
            return _results;
          })();
        }
        return new JavaArray(rs, type, array);
      };
      rs.push(init_arr(0));
    };

    return MultiArrayOpcode;

  })(root.Opcode);

  root.ArrayLoadOpcode = (function(_super) {

    __extends(ArrayLoadOpcode, _super);

    function ArrayLoadOpcode() {
      return ArrayLoadOpcode.__super__.constructor.apply(this, arguments);
    }

    ArrayLoadOpcode.prototype.execute = function(rs) {
      var array, idx, obj, _ref2;
      idx = rs.pop();
      obj = rs.check_null(rs.pop());
      array = obj.array;
      if (!((0 <= idx && idx < array.length))) {
        java_throw(rs, 'java/lang/ArrayIndexOutOfBoundsException', "" + idx + " not in length " + array.length + " array of type " + (obj.type.toClassString()));
      }
      rs.push(array[idx]);
      if ((_ref2 = this.name[0]) === 'l' || _ref2 === 'd') {
        rs.push(null);
      }
    };

    return ArrayLoadOpcode;

  })(root.Opcode);

  root.ArrayStoreOpcode = (function(_super) {

    __extends(ArrayStoreOpcode, _super);

    function ArrayStoreOpcode() {
      return ArrayStoreOpcode.__super__.constructor.apply(this, arguments);
    }

    ArrayStoreOpcode.prototype.execute = function(rs) {
      var array, idx, obj, value, _ref2;
      value = (_ref2 = this.name[0]) === 'l' || _ref2 === 'd' ? rs.pop2() : rs.pop();
      idx = rs.pop();
      obj = rs.check_null(rs.pop());
      array = obj.array;
      if (!((0 <= idx && idx < array.length))) {
        java_throw(rs, 'java/lang/ArrayIndexOutOfBoundsException', "" + idx + " not in length " + array.length + " array of type " + (obj.type.toClassString()));
      }
      array[idx] = value;
    };

    return ArrayStoreOpcode;

  })(root.Opcode);

  jsr = function(rs) {
    rs.push(rs.curr_pc() + this.byte_count + 1);
    rs.inc_pc(this.offset);
    return false;
  };

  root.opcodes = {
    0: new root.Opcode('nop', {
      execute: function() {}
    }),
    1: new root.Opcode('aconst_null', {
      execute: function(rs) {
        return rs.push(null);
      }
    }),
    2: new root.Opcode('iconst_m1', {
      execute: function(rs) {
        return rs.push(-1);
      }
    }),
    3: new root.Opcode('iconst_0', {
      execute: function(rs) {
        return rs.push(0);
      }
    }),
    4: new root.Opcode('iconst_1', {
      execute: function(rs) {
        return rs.push(1);
      }
    }),
    5: new root.Opcode('iconst_2', {
      execute: function(rs) {
        return rs.push(2);
      }
    }),
    6: new root.Opcode('iconst_3', {
      execute: function(rs) {
        return rs.push(3);
      }
    }),
    7: new root.Opcode('iconst_4', {
      execute: function(rs) {
        return rs.push(4);
      }
    }),
    8: new root.Opcode('iconst_5', {
      execute: function(rs) {
        return rs.push(5);
      }
    }),
    9: new root.Opcode('lconst_0', {
      execute: function(rs) {
        return rs.push2(gLong.ZERO, null);
      }
    }),
    10: new root.Opcode('lconst_1', {
      execute: function(rs) {
        return rs.push2(gLong.ONE, null);
      }
    }),
    11: new root.Opcode('fconst_0', {
      execute: function(rs) {
        return rs.push(0);
      }
    }),
    12: new root.Opcode('fconst_1', {
      execute: function(rs) {
        return rs.push(1);
      }
    }),
    13: new root.Opcode('fconst_2', {
      execute: function(rs) {
        return rs.push(2);
      }
    }),
    14: new root.Opcode('dconst_0', {
      execute: function(rs) {
        return rs.push2(0, null);
      }
    }),
    15: new root.Opcode('dconst_1', {
      execute: function(rs) {
        return rs.push2(1, null);
      }
    }),
    16: new root.PushOpcode('bipush', {
      byte_count: 1
    }),
    17: new root.PushOpcode('sipush', {
      byte_count: 2
    }),
    18: new root.LoadConstantOpcode('ldc', {
      byte_count: 1
    }),
    19: new root.LoadConstantOpcode('ldc_w', {
      byte_count: 2
    }),
    20: new root.LoadConstantOpcode('ldc2_w', {
      byte_count: 2,
      execute: (function(rs) {
        return rs.push2(this.constant.value, null);
      })
    }),
    21: new root.LoadVarOpcode('iload'),
    22: new root.LoadVarOpcode('lload'),
    23: new root.LoadVarOpcode('fload'),
    24: new root.LoadVarOpcode('dload'),
    25: new root.LoadVarOpcode('aload'),
    26: new root.LoadOpcode('iload_0'),
    27: new root.LoadOpcode('iload_1'),
    28: new root.LoadOpcode('iload_2'),
    29: new root.LoadOpcode('iload_3'),
    30: new root.LoadOpcode('lload_0'),
    31: new root.LoadOpcode('lload_1'),
    32: new root.LoadOpcode('lload_2'),
    33: new root.LoadOpcode('lload_3'),
    34: new root.LoadOpcode('fload_0'),
    35: new root.LoadOpcode('fload_1'),
    36: new root.LoadOpcode('fload_2'),
    37: new root.LoadOpcode('fload_3'),
    38: new root.LoadOpcode('dload_0'),
    39: new root.LoadOpcode('dload_1'),
    40: new root.LoadOpcode('dload_2'),
    41: new root.LoadOpcode('dload_3'),
    42: new root.LoadOpcode('aload_0'),
    43: new root.LoadOpcode('aload_1'),
    44: new root.LoadOpcode('aload_2'),
    45: new root.LoadOpcode('aload_3'),
    46: new root.ArrayLoadOpcode('iaload'),
    47: new root.ArrayLoadOpcode('laload'),
    48: new root.ArrayLoadOpcode('faload'),
    49: new root.ArrayLoadOpcode('daload'),
    50: new root.ArrayLoadOpcode('aaload'),
    51: new root.ArrayLoadOpcode('baload'),
    52: new root.ArrayLoadOpcode('caload'),
    53: new root.ArrayLoadOpcode('saload'),
    54: new root.StoreVarOpcode('istore', {
      execute: function(rs) {
        return rs.put_cl(this.var_num, rs.pop());
      }
    }),
    55: new root.StoreVarOpcode('lstore', {
      execute: function(rs) {
        return rs.put_cl2(this.var_num, rs.pop2());
      }
    }),
    56: new root.StoreVarOpcode('fstore', {
      execute: function(rs) {
        return rs.put_cl(this.var_num, rs.pop());
      }
    }),
    57: new root.StoreVarOpcode('dstore', {
      execute: function(rs) {
        return rs.put_cl2(this.var_num, rs.pop2());
      }
    }),
    58: new root.StoreVarOpcode('astore', {
      execute: function(rs) {
        return rs.put_cl(this.var_num, rs.pop());
      }
    }),
    59: new root.StoreOpcode('istore_0'),
    60: new root.StoreOpcode('istore_1'),
    61: new root.StoreOpcode('istore_2'),
    62: new root.StoreOpcode('istore_3'),
    63: new root.StoreOpcode('lstore_0'),
    64: new root.StoreOpcode('lstore_1'),
    65: new root.StoreOpcode('lstore_2'),
    66: new root.StoreOpcode('lstore_3'),
    67: new root.StoreOpcode('fstore_0'),
    68: new root.StoreOpcode('fstore_1'),
    69: new root.StoreOpcode('fstore_2'),
    70: new root.StoreOpcode('fstore_3'),
    71: new root.StoreOpcode('dstore_0'),
    72: new root.StoreOpcode('dstore_1'),
    73: new root.StoreOpcode('dstore_2'),
    74: new root.StoreOpcode('dstore_3'),
    75: new root.StoreOpcode('astore_0'),
    76: new root.StoreOpcode('astore_1'),
    77: new root.StoreOpcode('astore_2'),
    78: new root.StoreOpcode('astore_3'),
    79: new root.ArrayStoreOpcode('iastore'),
    80: new root.ArrayStoreOpcode('lastore'),
    81: new root.ArrayStoreOpcode('fastore'),
    82: new root.ArrayStoreOpcode('dastore'),
    83: new root.ArrayStoreOpcode('aastore'),
    84: new root.ArrayStoreOpcode('bastore'),
    85: new root.ArrayStoreOpcode('castore'),
    86: new root.ArrayStoreOpcode('sastore'),
    87: new root.Opcode('pop', {
      execute: function(rs) {
        return rs.pop();
      }
    }),
    88: new root.Opcode('pop2', {
      execute: function(rs) {
        return rs.pop2();
      }
    }),
    89: new root.Opcode('dup', {
      execute: function(rs) {
        var v;
        v = rs.pop();
        return rs.push2(v, v);
      }
    }),
    90: new root.Opcode('dup_x1', {
      execute: function(rs) {
        var v1, v2;
        v1 = rs.pop();
        v2 = rs.pop();
        return rs.push_array([v1, v2, v1]);
      }
    }),
    91: new root.Opcode('dup_x2', {
      execute: function(rs) {
        var v1, v2, v3, _ref2;
        _ref2 = [rs.pop(), rs.pop(), rs.pop()], v1 = _ref2[0], v2 = _ref2[1], v3 = _ref2[2];
        return rs.push_array([v1, v3, v2, v1]);
      }
    }),
    92: new root.Opcode('dup2', {
      execute: function(rs) {
        var v1, v2;
        v1 = rs.pop();
        v2 = rs.pop();
        return rs.push_array([v2, v1, v2, v1]);
      }
    }),
    93: new root.Opcode('dup2_x1', {
      execute: function(rs) {
        var v1, v2, v3, _ref2;
        _ref2 = [rs.pop(), rs.pop(), rs.pop()], v1 = _ref2[0], v2 = _ref2[1], v3 = _ref2[2];
        return rs.push_array([v2, v1, v3, v2, v1]);
      }
    }),
    94: new root.Opcode('dup2_x2', {
      execute: function(rs) {
        var v1, v2, v3, v4, _ref2;
        _ref2 = [rs.pop(), rs.pop(), rs.pop(), rs.pop()], v1 = _ref2[0], v2 = _ref2[1], v3 = _ref2[2], v4 = _ref2[3];
        return rs.push_array([v2, v1, v4, v3, v2, v1]);
      }
    }),
    95: new root.Opcode('swap', {
      execute: function(rs) {
        var v1, v2;
        v2 = rs.pop();
        v1 = rs.pop();
        return rs.push2(v2, v1);
      }
    }),
    96: new root.Opcode('iadd', {
      execute: function(rs) {
        return rs.push((rs.pop() + rs.pop()) | 0);
      }
    }),
    97: new root.Opcode('ladd', {
      execute: function(rs) {
        return rs.push2(rs.pop2().add(rs.pop2()), null);
      }
    }),
    98: new root.Opcode('fadd', {
      execute: function(rs) {
        var a, b;
        a = rs.pop();
        b = rs.pop();
        return rs.push(util.are_floats_NaN(a, b) ? util.FLOAT_NaN : util.wrap_float(a + b));
      }
    }),
    99: new root.Opcode('dadd', {
      execute: function(rs) {
        return rs.push2(rs.pop2() + rs.pop2(), null);
      }
    }),
    100: new root.Opcode('isub', {
      execute: function(rs) {
        return rs.push((-rs.pop() + rs.pop()) | 0);
      }
    }),
    101: new root.Opcode('lsub', {
      execute: function(rs) {
        return rs.push2(rs.pop2().negate().add(rs.pop2()), null);
      }
    }),
    102: new root.Opcode('fsub', {
      execute: function(rs) {
        var a, b;
        a = rs.pop();
        b = rs.pop();
        return rs.push(util.are_floats_NaN(a, b) ? util.FLOAT_NaN : util.wrap_float(-a + b));
      }
    }),
    103: new root.Opcode('dsub', {
      execute: function(rs) {
        return rs.push2(-rs.pop2() + rs.pop2(), null);
      }
    }),
    104: new root.Opcode('imul', {
      execute: function(rs) {
        return rs.push(gLong.fromInt(rs.pop()).multiply(gLong.fromInt(rs.pop())).toInt());
      }
    }),
    105: new root.Opcode('lmul', {
      execute: function(rs) {
        return rs.push2(rs.pop2().multiply(rs.pop2()), null);
      }
    }),
    106: new root.Opcode('fmul', {
      execute: function(rs) {
        var a, b;
        a = rs.pop();
        b = rs.pop();
        return rs.push(util.are_floats_NaN(a, b) ? util.FLOAT_NaN : util.wrap_float(a * b));
      }
    }),
    107: new root.Opcode('dmul', {
      execute: function(rs) {
        return rs.push2(rs.pop2() * rs.pop2(), null);
      }
    }),
    108: new root.Opcode('idiv', {
      execute: function(rs) {
        var v;
        v = rs.pop();
        return rs.push(util.int_div(rs, rs.pop(), v));
      }
    }),
    109: new root.Opcode('ldiv', {
      execute: function(rs) {
        var v;
        v = rs.pop2();
        return rs.push2(util.long_div(rs, rs.pop2(), v), null);
      }
    }),
    110: new root.Opcode('fdiv', {
      execute: function(rs) {
        var a, b;
        a = rs.pop();
        b = rs.pop();
        return rs.push(util.are_floats_NaN(a, b) ? util.FLOAT_NaN : util.wrap_float(b / a));
      }
    }),
    111: new root.Opcode('ddiv', {
      execute: function(rs) {
        var v;
        v = rs.pop2();
        return rs.push2(rs.pop2() / v, null);
      }
    }),
    112: new root.Opcode('irem', {
      execute: function(rs) {
        var v2;
        v2 = rs.pop();
        return rs.push(util.int_mod(rs, rs.pop(), v2));
      }
    }),
    113: new root.Opcode('lrem', {
      execute: function(rs) {
        var v2;
        v2 = rs.pop2();
        return rs.push2(util.long_mod(rs, rs.pop2(), v2), null);
      }
    }),
    114: new root.Opcode('frem', {
      execute: function(rs) {
        var v2;
        v2 = rs.pop();
        return rs.push(rs.pop() % v2);
      }
    }),
    115: new root.Opcode('drem', {
      execute: function(rs) {
        var v2;
        v2 = rs.pop2();
        return rs.push2(rs.pop2() % v2, null);
      }
    }),
    116: new root.Opcode('ineg', {
      execute: function(rs) {
        return rs.push(-rs.pop() | 0);
      }
    }),
    117: new root.Opcode('lneg', {
      execute: function(rs) {
        return rs.push2(rs.pop2().negate(), null);
      }
    }),
    118: new root.Opcode('fneg', {
      execute: function(rs) {
        return rs.push(-rs.pop());
      }
    }),
    119: new root.Opcode('dneg', {
      execute: function(rs) {
        return rs.push2(-rs.pop2(), null);
      }
    }),
    120: new root.Opcode('ishl', {
      execute: function(rs) {
        var s;
        s = rs.pop();
        return rs.push(rs.pop() << s);
      }
    }),
    121: new root.Opcode('lshl', {
      execute: function(rs) {
        var s;
        s = rs.pop();
        return rs.push2(rs.pop2().shiftLeft(gLong.fromInt(s)), null);
      }
    }),
    122: new root.Opcode('ishr', {
      execute: function(rs) {
        var s;
        s = rs.pop();
        return rs.push(rs.pop() >> s);
      }
    }),
    123: new root.Opcode('lshr', {
      execute: function(rs) {
        var s;
        s = rs.pop();
        return rs.push2(rs.pop2().shiftRight(gLong.fromInt(s)), null);
      }
    }),
    124: new root.Opcode('iushr', {
      execute: function(rs) {
        var s;
        s = rs.pop();
        return rs.push(rs.pop() >>> s);
      }
    }),
    125: new root.Opcode('lushr', {
      execute: function(rs) {
        var s;
        s = rs.pop();
        return rs.push2(rs.pop2().shiftRightUnsigned(gLong.fromInt(s)), null);
      }
    }),
    126: new root.Opcode('iand', {
      execute: function(rs) {
        return rs.push(rs.pop() & rs.pop());
      }
    }),
    127: new root.Opcode('land', {
      execute: function(rs) {
        return rs.push2(rs.pop2().and(rs.pop2()), null);
      }
    }),
    128: new root.Opcode('ior', {
      execute: function(rs) {
        return rs.push(rs.pop() | rs.pop());
      }
    }),
    129: new root.Opcode('lor', {
      execute: function(rs) {
        return rs.push2(rs.pop2().or(rs.pop2()), null);
      }
    }),
    130: new root.Opcode('ixor', {
      execute: function(rs) {
        return rs.push(rs.pop() ^ rs.pop());
      }
    }),
    131: new root.Opcode('lxor', {
      execute: function(rs) {
        return rs.push2(rs.pop2().xor(rs.pop2()), null);
      }
    }),
    132: new root.IIncOpcode('iinc'),
    133: new root.Opcode('i2l', {
      execute: function(rs) {
        return rs.push2(gLong.fromInt(rs.pop()), null);
      }
    }),
    134: new root.Opcode('i2f', {
      execute: function(rs) {}
    }),
    135: new root.Opcode('i2d', {
      execute: function(rs) {
        return rs.push(null);
      }
    }),
    136: new root.Opcode('l2i', {
      execute: function(rs) {
        return rs.push(rs.pop2().toInt());
      }
    }),
    137: new root.Opcode('l2f', {
      execute: function(rs) {
        return rs.push(rs.pop2().toNumber());
      }
    }),
    138: new root.Opcode('l2d', {
      execute: function(rs) {
        return rs.push2(rs.pop2().toNumber(), null);
      }
    }),
    139: new root.Opcode('f2i', {
      execute: function(rs) {
        return rs.push(util.float2int(rs.pop()));
      }
    }),
    140: new root.Opcode('f2l', {
      execute: function(rs) {
        return rs.push2(gLong.fromNumber(rs.pop()), null);
      }
    }),
    141: new root.Opcode('f2d', {
      execute: function(rs) {
        return rs.push(null);
      }
    }),
    142: new root.Opcode('d2i', {
      execute: function(rs) {
        return rs.push(util.float2int(rs.pop2()));
      }
    }),
    143: new root.Opcode('d2l', {
      execute: function(rs) {
        var d_val;
        d_val = rs.pop2();
        if (d_val === Number.POSITIVE_INFINITY) {
          return rs.push2(gLong.MAX_VALUE, null);
        } else if (d_val === Number.NEGATIVE_INFINITY) {
          return rs.push2(gLong.MIN_VALUE, null);
        } else {
          return rs.push2(gLong.fromNumber(d_val), null);
        }
      }
    }),
    144: new root.Opcode('d2f', {
      execute: function(rs) {
        return rs.push(util.wrap_float(rs.pop2()));
      }
    }),
    145: new root.Opcode('i2b', {
      execute: function(rs) {
        return rs.push((rs.pop() << 24) >> 24);
      }
    }),
    146: new root.Opcode('i2c', {
      execute: function(rs) {
        return rs.push(rs.pop() & 0xFFFF);
      }
    }),
    147: new root.Opcode('i2s', {
      execute: function(rs) {
        return rs.push((rs.pop() << 16) >> 16);
      }
    }),
    148: new root.Opcode('lcmp', {
      execute: function(rs) {
        var v2;
        v2 = rs.pop2();
        return rs.push(rs.pop2().compare(v2));
      }
    }),
    149: new root.Opcode('fcmpl', {
      execute: function(rs) {
        var v2, _ref2;
        v2 = rs.pop();
        return rs.push((_ref2 = util.cmp(rs.pop(), v2)) != null ? _ref2 : -1);
      }
    }),
    150: new root.Opcode('fcmpg', {
      execute: function(rs) {
        var v2, _ref2;
        v2 = rs.pop();
        return rs.push((_ref2 = util.cmp(rs.pop(), v2)) != null ? _ref2 : 1);
      }
    }),
    151: new root.Opcode('dcmpl', {
      execute: function(rs) {
        var v2, _ref2;
        v2 = rs.pop2();
        return rs.push((_ref2 = util.cmp(rs.pop2(), v2)) != null ? _ref2 : -1);
      }
    }),
    152: new root.Opcode('dcmpg', {
      execute: function(rs) {
        var v2, _ref2;
        v2 = rs.pop2();
        return rs.push((_ref2 = util.cmp(rs.pop2(), v2)) != null ? _ref2 : 1);
      }
    }),
    153: new root.UnaryBranchOpcode('ifeq', {
      cmp: function(v) {
        return v === 0;
      }
    }),
    154: new root.UnaryBranchOpcode('ifne', {
      cmp: function(v) {
        return v !== 0;
      }
    }),
    155: new root.UnaryBranchOpcode('iflt', {
      cmp: function(v) {
        return v < 0;
      }
    }),
    156: new root.UnaryBranchOpcode('ifge', {
      cmp: function(v) {
        return v >= 0;
      }
    }),
    157: new root.UnaryBranchOpcode('ifgt', {
      cmp: function(v) {
        return v > 0;
      }
    }),
    158: new root.UnaryBranchOpcode('ifle', {
      cmp: function(v) {
        return v <= 0;
      }
    }),
    159: new root.BinaryBranchOpcode('if_icmpeq', {
      cmp: function(v1, v2) {
        return v1 === v2;
      }
    }),
    160: new root.BinaryBranchOpcode('if_icmpne', {
      cmp: function(v1, v2) {
        return v1 !== v2;
      }
    }),
    161: new root.BinaryBranchOpcode('if_icmplt', {
      cmp: function(v1, v2) {
        return v1 < v2;
      }
    }),
    162: new root.BinaryBranchOpcode('if_icmpge', {
      cmp: function(v1, v2) {
        return v1 >= v2;
      }
    }),
    163: new root.BinaryBranchOpcode('if_icmpgt', {
      cmp: function(v1, v2) {
        return v1 > v2;
      }
    }),
    164: new root.BinaryBranchOpcode('if_icmple', {
      cmp: function(v1, v2) {
        return v1 <= v2;
      }
    }),
    165: new root.BinaryBranchOpcode('if_acmpeq', {
      cmp: function(v1, v2) {
        return v1 === v2;
      }
    }),
    166: new root.BinaryBranchOpcode('if_acmpne', {
      cmp: function(v1, v2) {
        return v1 !== v2;
      }
    }),
    167: new root.BranchOpcode('goto', {
      execute: function(rs) {
        rs.inc_pc(this.offset);
        return false;
      }
    }),
    168: new root.BranchOpcode('jsr', {
      execute: jsr
    }),
    169: new root.Opcode('ret', {
      byte_count: 1,
      execute: function(rs) {
        rs.goto_pc(rs.cl(this.args[0]));
        return false;
      }
    }),
    170: new root.TableSwitchOpcode('tableswitch'),
    171: new root.LookupSwitchOpcode('lookupswitch'),
    172: new root.Opcode('ireturn', {
      execute: function(rs) {
        var cf;
        cf = rs.meta_stack().pop();
        rs.push(cf.stack[0]);
        throw ReturnException;
      }
    }),
    173: new root.Opcode('lreturn', {
      execute: function(rs) {
        var cf;
        cf = rs.meta_stack().pop();
        rs.push2(cf.stack[0], null);
        throw ReturnException;
      }
    }),
    174: new root.Opcode('freturn', {
      execute: function(rs) {
        var cf;
        cf = rs.meta_stack().pop();
        rs.push(cf.stack[0]);
        throw ReturnException;
      }
    }),
    175: new root.Opcode('dreturn', {
      execute: function(rs) {
        var cf;
        cf = rs.meta_stack().pop();
        rs.push2(cf.stack[0], null);
        throw ReturnException;
      }
    }),
    176: new root.Opcode('areturn', {
      execute: function(rs) {
        var cf;
        cf = rs.meta_stack().pop();
        rs.push(cf.stack[0]);
        throw ReturnException;
      }
    }),
    177: new root.Opcode('return', {
      execute: function(rs) {
        rs.meta_stack().pop();
        throw ReturnException;
      }
    }),
    178: new root.FieldOpcode('getstatic', {
      execute: function(rs) {
        var _ref2;
        rs.push(rs.static_get(this.field_spec));
        if ((_ref2 = this.field_spec.type) === 'J' || _ref2 === 'D') {
          return rs.push(null);
        }
      }
    }),
    179: new root.FieldOpcode('putstatic', {
      execute: function(rs) {
        return rs.static_put(this.field_spec);
      }
    }),
    180: new root.FieldOpcode('getfield', {
      execute: function(rs) {
        var field, name, new_execute, _ref2;
        field = rs.field_lookup(this.field_spec);
        name = field.class_type.toClassString() + '/' + this.field_spec.name;
        new_execute = (_ref2 = this.field_spec.type) !== 'J' && _ref2 !== 'D' ? function(rs) {
          var val;
          val = rs.pop().get_field(rs, name);
          return rs.push(val);
        } : function(rs) {
          var val;
          val = rs.pop().get_field(rs, name);
          return rs.push2(val, null);
        };
        new_execute.call(this, rs);
        this.execute = new_execute;
      }
    }),
    181: new root.FieldOpcode('putfield', {
      execute: function(rs) {
        var cls, field, name, new_execute, _ref2;
        field = rs.field_lookup(this.field_spec);
        name = field.class_type.toClassString() + '/' + this.field_spec.name;
        cls = field.class_type.toClassString();
        new_execute = (_ref2 = this.field_spec.type) !== 'J' && _ref2 !== 'D' ? function(rs) {
          var val;
          val = rs.pop();
          return rs.pop().set_field(this, name, val);
        } : function(rs) {
          var val;
          val = rs.pop2();
          return rs.pop().set_field(this, name, val);
        };
        new_execute.call(this, rs);
        this.execute = new_execute;
      }
    }),
    182: new root.DynInvokeOpcode('invokevirtual'),
    183: new root.InvokeOpcode('invokespecial'),
    184: new root.InvokeOpcode('invokestatic'),
    185: new root.DynInvokeOpcode('invokeinterface'),
    187: new root.ClassOpcode('new', {
      execute: function(rs) {
        this.type = c2t(this["class"]);
        this.cls = rs.class_lookup(this.type);
        rs.push(new JavaObject(rs, this.type, this.cls));
        return this.execute = function(rs) {
          return rs.push(new JavaObject(rs, this.type, this.cls));
        };
      }
    }),
    188: new root.NewArrayOpcode('newarray', {
      execute: function(rs) {
        return rs.push(rs.heap_newarray(this.element_type, rs.pop()));
      }
    }),
    189: new root.ClassOpcode('anewarray', {
      execute: function(rs) {
        return rs.push(rs.heap_newarray("L" + this["class"] + ";", rs.pop()));
      }
    }),
    190: new root.Opcode('arraylength', {
      execute: function(rs) {
        return rs.push(rs.check_null(rs.pop()).array.length);
      }
    }),
    191: new root.Opcode('athrow', {
      execute: function(rs) {
        throw new JavaException(rs.pop());
      }
    }),
    192: new root.ClassOpcode('checkcast', {
      execute: function(rs) {
        var candidate_class, o, target_class;
        o = rs.pop();
        if ((!(o != null)) || types.check_cast(rs, o, this["class"])) {
          return rs.push(o);
        } else {
          target_class = c2t(this["class"]).toExternalString();
          candidate_class = o.type.toExternalString();
          return java_throw(rs, 'java/lang/ClassCastException', "" + candidate_class + " cannot be cast to " + target_class);
        }
      }
    }),
    193: new root.ClassOpcode('instanceof', {
      execute: function(rs) {
        var o;
        o = rs.pop();
        return rs.push(o != null ? types.check_cast(rs, o, this["class"]) + 0 : 0);
      }
    }),
    194: new root.Opcode('monitorenter', {
      execute: function(rs) {
        var locked_thread, monitor;
        monitor = rs.pop();
        if ((locked_thread = rs.lock_refs[monitor]) != null) {
          if (locked_thread === rs.curr_thread) {
            return rs.lock_counts[monitor]++;
          } else {
            rs.inc_pc(1);
            rs.meta_stack().push({});
            return rs.wait(monitor);
          }
        } else {
          rs.lock_refs[monitor] = rs.curr_thread;
          return rs.lock_counts[monitor] = 1;
        }
      }
    }),
    195: new root.Opcode('monitorexit', {
      execute: function(rs) {
        var locked_thread, monitor;
        monitor = rs.pop();
        if ((locked_thread = rs.lock_refs[monitor]) == null) {
          return;
        }
        if (locked_thread === rs.curr_thread) {
          rs.lock_counts[monitor]--;
          if (rs.lock_counts[monitor] === 0) {
            return delete rs.lock_refs[monitor];
          }
        } else {
          return java_throw(rs, 'java/lang/IllegalMonitorStateException', "Tried to monitorexit on lock not held by current thread");
        }
      }
    }),
    197: new root.MultiArrayOpcode('multianewarray'),
    198: new root.UnaryBranchOpcode('ifnull', {
      cmp: function(v) {
        return !(v != null);
      }
    }),
    199: new root.UnaryBranchOpcode('ifnonnull', {
      cmp: function(v) {
        return v != null;
      }
    }),
    200: new root.BranchOpcode('goto_w', {
      byte_count: 4,
      execute: function(rs) {
        rs.inc_pc(this.offset);
        return false;
      }
    }),
    201: new root.BranchOpcode('jsr_w', {
      byte_count: 4,
      execute: jsr
    })
  };

}).call(this);
