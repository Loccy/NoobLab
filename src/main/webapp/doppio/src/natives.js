// Generated by CoffeeScript 1.3.3
(function() {
  var JavaArray, JavaObject, arraycopy_check, arraycopy_no_check, c2t, debug, doPrivileged, error, exceptions, flatten_pkg, fs, gLong, get_property, log, native_define_class, native_methods, o, path, root, runtime, stat_file, system_properties, thread_name, trapped_methods, types, unsafe_compare_and_swap, util, vendor_path, write_to_file, _, _ref, _ref1, _ref2, _ref3;

  _ = require('../vendor/_.js');

  gLong = require('../vendor/gLong.js');

  util = require('./util');

  types = require('./types');

  runtime = require('./runtime');

  _ref = require('./java_object'), thread_name = _ref.thread_name, JavaObject = _ref.JavaObject, JavaArray = _ref.JavaArray;

  exceptions = require('./exceptions');

  _ref1 = require('./logging'), log = _ref1.log, debug = _ref1.debug, error = _ref1.error;

  path = (_ref2 = typeof node !== "undefined" && node !== null ? node.path : void 0) != null ? _ref2 : require('path');

  fs = (_ref3 = typeof node !== "undefined" && node !== null ? node.fs : void 0) != null ? _ref3 : require('fs');

  c2t = types.c2t;

  "use strict";


  root = typeof exports !== "undefined" && exports !== null ? exports : this.natives = {};

  if (typeof node !== "undefined" && node !== null) {
    vendor_path = '/home/doppio/vendor';
  } else {
    vendor_path = path.resolve(__dirname, '../vendor');
  }

  system_properties = {
    'java.home': "" + vendor_path + "/java_home",
    'sun.boot.class.path': "" + vendor_path + "/classes",
    'file.encoding': 'US_ASCII',
    'java.vendor': 'DoppioVM',
    'java.version': '1.6',
    'java.vendor.url': 'https://github.com/int3/doppio',
    'java.class.version': '50.0',
    'line.separator': '\n',
    'file.separator': '/',
    'path.separator': ':',
    'user.dir': path.resolve('.'),
    'user.home': '.',
    'user.name': 'DoppioUser',
    'os.name': 'Doppio',
    'os.arch': 'js',
    'os.version': '0',
    'java.awt.headless': (!(typeof node !== "undefined" && node !== null)).toString(),
    'java.awt.graphicsenv': 'classes.awt.CanvasGraphicsEnvironment',
    'useJavaUtilZip': 'true'
  };

  get_property = function(rs, jvm_key, _default) {
    var classpath, key, val, _ref4;
    if (_default == null) {
      _default = null;
    }
    key = jvm_key.jvm2js_str();
    if (key === 'java.class.path') {
      classpath = (_ref4 = typeof jvm !== "undefined" && jvm !== null ? jvm.classpath : void 0) != null ? _ref4 : require('./jvm').classpath;
      return rs.init_string(classpath.slice(0, classpath.length - 1).join(':'));
    }
    val = system_properties[key];
    if (val != null) {
      return rs.init_string(val, true);
    } else {
      return _default;
    }
  };

  o = function(fn_name, fn) {
    return {
      fn_name: fn_name,
      fn: fn
    };
  };

  trapped_methods = {
    // just trying...
    nooblab: {
        Graphics : [
            o('updatePosition(Ljava/lang/String;II)V', function(rs,id,x,y) {
                  parent.updatePosition(id.jvm2js_str(),x,y);
                  rs.curr_frame().runner = function() {
                    return rs.meta_stack().pop();
                  };
                  throw new exceptions.YieldIOException(function(cb) {
                    return setTimeout(cb, 0);
                  })
              })
        ]
     },
    // we highjack a fairly obscure method in the Java API in order to create a two-way channel
    // between Javascriptland and the JVM.    
    java: {
      //java.awt.datatransfer.SystemFlavorMap.decodeJavaMIMEType
      awt: {
          datatransfer : {
              SystemFlavorMap : [
                   o('decodeJavaMIMEType(Ljava/lang/String;)Ljava/lang/String;', function(rs,x) {
                    var result = eval(x.jvm2js_str());
                    return rs.init_string(result+"");
                  })
              ]
          }
      },
      lang: {
        ref: {
          Reference: [o('<clinit>()V', function(rs) {})]
        },
        System: [o('loadLibrary(L!/!/String;)V', function(rs) {}), o('adjustPropertiesForBackwardCompatibility(L!/util/Properties;)V', function(rs) {}), o('getProperty(L!/!/String;)L!/!/String;', get_property), o('getProperty(L!/!/String;L!/!/String;)L!/!/String;', get_property)],
        Terminator: [o('setup()V', function(rs) {})],
        Throwable: [
          o('fillInStackTrace()L!/!/!;', function(rs, _this) {
            var attrs, cls, cstack, i, line_nums, ln, row, sf, source_file, stack, strace, _i, _len, _ref4, _ref5, _ref6, _ref7, _ref8;
            stack = [];
            strace = rs.init_array("[Ljava/lang/StackTraceElement;", stack);
            _this.set_field(rs, 'java/lang/Throwable/stackTrace', strace);
            cstack = rs.meta_stack()._cs.slice(1, -1);
            for (_i = 0, _len = cstack.length; _i < _len; _i++) {
              sf = cstack[_i];
              if (!(!((sf.fake != null) || sf.locals[0] === _this))) {
                continue;
              }
              cls = sf.method.class_type;
              if (_this.type.toClassString() !== 'java/lang/NoClassDefFoundError') {
                attrs = rs.load_class(cls).attrs;
                source_file = ((_ref4 = _.find(attrs, function(attr) {
                  return attr.name === 'SourceFile';
                })) != null ? _ref4.filename : void 0) || 'unknown';
              } else {
                source_file = 'unknown';
              }
              line_nums = (_ref5 = sf.method.code) != null ? (_ref6 = _ref5.attrs) != null ? (_ref7 = _ref6[0]) != null ? _ref7.entries : void 0 : void 0 : void 0;
              if (line_nums != null) {
                ln = util.last((function() {
                  var _results;
                  _results = [];
                  for (i in line_nums) {
                    row = line_nums[i];
                    if (row.start_pc <= sf.pc) {
                      _results.push(row.line_number);
                    }
                  }
                  return _results;
                })());
              }
              if (ln == null) {
                ln = -1;
              }
              stack.push(rs.init_object("java/lang/StackTraceElement", {
                'java/lang/StackTraceElement/declaringClass': rs.init_string(util.ext_classname(cls.toClassString())),
                'java/lang/StackTraceElement/methodName': rs.init_string((_ref8 = sf.method.name) != null ? _ref8 : 'unknown'),
                'java/lang/StackTraceElement/fileName': rs.init_string(source_file),
                'java/lang/StackTraceElement/lineNumber': ln
              }));
            }
            stack.reverse();
            return _this;
          })
        ]
      },
      util: {
        concurrent: {
          atomic: {
            AtomicInteger: [
              o('<clinit>()V', function(rs) {}), o('compareAndSet(II)Z', function(rs, _this, expect, update) {
                _this.set_field(rs, 'java/util/concurrent/atomic/AtomicInteger/value', update);
                return true;
              })
            ]
          }
        },
        Currency: [
          o('getInstance(Ljava/lang/String;)Ljava/util/Currency;', function(rs) {
            return null;
          })
        ]
      },
      nio: {
        Bits: [
          o('byteOrder()L!/!/ByteOrder;', function(rs) {
            return rs.static_get({
              "class": 'java/nio/ByteOrder',
              name: 'LITTLE_ENDIAN'
            });
          })
        ],
        charset: {
          Charset$3: [
            o('run()L!/lang/Object;', function(rs) {
              return null;
            })
          ]
        }
      }
    }
  };

  doPrivileged = function(rs, action) {
    var m, my_sf;
    my_sf = rs.curr_frame();
    m = rs.method_lookup({
      "class": action.type.toClassString(),
      sig: 'run()Ljava/lang/Object;'
    });
    if (!m.access_flags["static"]) {
      rs.push(action);
    }
    m.setup_stack(rs);
    my_sf.runner = function() {
      var rv;
      rv = rs.pop();
      rs.meta_stack().pop();
      return rs.push(rv);
    };
    throw exceptions.ReturnException;
  };

  stat_file = function(fname) {
    try {
      if (util.is_string(fname)) {
        return fs.statSync(fname);
      } else {
        return fs.fstatSync(fname);
      }
    } catch (e) {
      return null;
    }
  };

  arraycopy_no_check = function(src, src_pos, dest, dest_pos, length) {
    var i, j, _i, _ref4;
    j = dest_pos;
    for (i = _i = src_pos, _ref4 = src_pos + length; _i < _ref4; i = _i += 1) {
      dest.array[j++] = src.array[i];
    }
  };

  arraycopy_check = function(rs, src, src_pos, dest, dest_pos, length) {
    var i, j, _i, _ref4;
    j = dest_pos;
    for (i = _i = src_pos, _ref4 = src_pos + length; _i < _ref4; i = _i += 1) {
      if (src.array[i] === null || types.is_castable(rs, src.array[i].type, dest.type.component_type)) {
        dest.array[j] = src.array[i];
      } else {
        exceptions.java_throw(rs, 'java/lang/ArrayStoreException', 'Array element in src cannot be cast to dest array type.');
      }
      j++;
    }
  };

  unsafe_compare_and_swap = function(rs, _this, obj, offset, expected, x) {
    var actual;
    actual = obj.get_field_from_offset(rs, offset);
    if (actual === expected) {
      obj.set_field_from_offset(rs, offset, x);
      return true;
    } else {
      return false;
    }
  };

  native_define_class = function(rs, name, bytes, offset, len, loader) {
    var b, raw_bytes;
    raw_bytes = (function() {
      var _i, _len, _ref4, _results;
      _ref4 = bytes.array.slice(offset, offset + len);
      _results = [];
      for (_i = 0, _len = _ref4.length; _i < _len; _i++) {
        b = _ref4[_i];
        _results.push((256 + b) % 256);
      }
      return _results;
    })();
    return rs.define_class(util.int_classname(name.jvm2js_str()), raw_bytes, loader);
  };

  write_to_file = function(rs, _this, bytes, offset, len, append) {
    if (_this.$file === 'closed') {
      exceptions.java_throw(rs, 'java/io/IOException', "Bad file descriptor");
    }
    if (_this.$file != null) {
      fs.writeSync(_this.$file, new Buffer(bytes.array), offset, len);
      return;
    }
    rs.print(util.chars2js_str(bytes, offset, len));
    if (typeof node !== "undefined" && node !== null) {
      rs.curr_frame().runner = function() {
        return rs.meta_stack().pop();
      };
      throw new exceptions.YieldIOException(function(cb) {
        return setTimeout(cb, 0);
      });
    }
  };

  native_methods = {
    java: {
      lang: {
        Class: [
          o('getPrimitiveClass(L!/!/String;)L!/!/!;', function(rs, jvm_str) {
            return rs.jclass_obj(new types.PrimitiveType(jvm_str.jvm2js_str()), true);
          }), o('getClassLoader0()L!/!/ClassLoader;', function(rs, _this) {
            return rs.class_states[_this.type.toClassString()].loader;
          }), o('desiredAssertionStatus0(L!/!/!;)Z', function(rs) {
            return false;
          }), o('getName0()L!/!/String;', function(rs, _this) {
            return rs.init_string(_this.$type.toExternalString());
          }), o('forName0(L!/!/String;ZL!/!/ClassLoader;)L!/!/!;', function(rs, jvm_str, initialize, loader) {
            var my_sf, rv, type;
            type = c2t(util.int_classname(jvm_str.jvm2js_str()));
            if (loader === null) {
              rv = rs.jclass_obj(type, true);
              if (initialize) {
                rs.class_lookup(type, true);
              }
              return rv;
            }
            my_sf = rs.curr_frame();
            rs.push2(loader, jvm_str);
            rs.method_lookup({
              "class": loader.type.toClassString(),
              sig: 'loadClass(Ljava/lang/String;)Ljava/lang/Class;'
            }).setup_stack(rs);
            my_sf.runner = function() {
              rv = rs.pop();
              rs.meta_stack().pop();
              rs.push(rv);
              if (initialize) {
                return rs.class_lookup(type, true);
              }
            };
            throw exceptions.ReturnException;
          }), o('getComponentType()L!/!/!;', function(rs, _this) {
            var type;
            type = _this.$type;
            if (!(type instanceof types.ArrayType)) {
              return null;
            }
            return rs.jclass_obj(type.component_type, true);
          }), o('getGenericSignature()Ljava/lang/String;', function(rs, _this) {
            var sig, _ref4;
            sig = (_ref4 = _.find(_this.file.attrs, function(a) {
              return a.name === 'Signature';
            })) != null ? _ref4.sig : void 0;
            if (sig != null) {
              return rs.init_string(sig);
            } else {
              return null;
            }
          }), o('getProtectionDomain0()Ljava/security/ProtectionDomain;', function(rs, _this) {
            return null;
          }), o('isAssignableFrom(L!/!/!;)Z', function(rs, _this, cls) {
            return types.is_castable(rs, cls.$type, _this.$type);
          }), o('isInterface()Z', function(rs, _this) {
            if (!(_this.$type instanceof types.ClassType)) {
              return false;
            }
            return _this.file.access_flags["interface"];
          }), o('isInstance(L!/!/Object;)Z', function(rs, _this, obj) {
            return types.is_castable(rs, obj.type, _this.$type);
          }), o('isPrimitive()Z', function(rs, _this) {
            return _this.$type instanceof types.PrimitiveType;
          }), o('isArray()Z', function(rs, _this) {
            return _this.$type instanceof types.ArrayType;
          }), o('getSuperclass()L!/!/!;', function(rs, _this) {
            var cls;
            if (_this.$type instanceof types.PrimitiveType) {
              return null;
            }
            cls = _this.file;
            if (cls.access_flags["interface"] || !(cls.super_class != null)) {
              return null;
            }
            return rs.jclass_obj(cls.super_class, true);
          }), o('getDeclaredFields0(Z)[Ljava/lang/reflect/Field;', function(rs, _this, public_only) {
            var f, fields;
            fields = _this.file.fields;
            if (public_only) {
              fields = (function() {
                var _i, _len, _results;
                _results = [];
                for (_i = 0, _len = fields.length; _i < _len; _i++) {
                  f = fields[_i];
                  if (f.access_flags["public"]) {
                    _results.push(f);
                  }
                }
                return _results;
              })();
            }
            return rs.init_array('[Ljava/lang/reflect/Field;', (function() {
              var _i, _len, _results;
              _results = [];
              for (_i = 0, _len = fields.length; _i < _len; _i++) {
                f = fields[_i];
                _results.push(f.reflector(rs));
              }
              return _results;
            })());
          }), o('getDeclaredMethods0(Z)[Ljava/lang/reflect/Method;', function(rs, _this, public_only) {
            var m, methods, sig;
            methods = _this.file.methods;
            methods = (function() {
              var _results;
              _results = [];
              for (sig in methods) {
                m = methods[sig];
                if (sig[0] !== '<' && (m.access_flags["public"] || !public_only)) {
                  _results.push(m);
                }
              }
              return _results;
            })();
            return rs.init_array('[Ljava/lang/reflect/Method;', (function() {
              var _i, _len, _results;
              _results = [];
              for (_i = 0, _len = methods.length; _i < _len; _i++) {
                m = methods[_i];
                _results.push(m.reflector(rs));
              }
              return _results;
            })());
          }), o('getDeclaredConstructors0(Z)[Ljava/lang/reflect/Constructor;', function(rs, _this, public_only) {
            var m, methods, sig;
            methods = _this.file.methods;
            methods = (function() {
              var _results;
              _results = [];
              for (sig in methods) {
                m = methods[sig];
                if (m.name === '<init>') {
                  _results.push(m);
                }
              }
              return _results;
            })();
            if (public_only) {
              methods = (function() {
                var _i, _len, _results;
                _results = [];
                for (_i = 0, _len = methods.length; _i < _len; _i++) {
                  m = methods[_i];
                  if (m.access_flags["public"]) {
                    _results.push(m);
                  }
                }
                return _results;
              })();
            }
            return rs.init_array('[Ljava/lang/reflect/Constructor;', (function() {
              var _i, _len, _results;
              _results = [];
              for (_i = 0, _len = methods.length; _i < _len; _i++) {
                m = methods[_i];
                _results.push(m.reflector(rs, true));
              }
              return _results;
            })());
          }), o('getInterfaces()[L!/!/!;', function(rs, _this) {
            var cls, i, iface, iface_objs, ifaces;
            cls = _this.file;
            ifaces = (function() {
              var _i, _len, _ref4, _results;
              _ref4 = cls.interfaces;
              _results = [];
              for (_i = 0, _len = _ref4.length; _i < _len; _i++) {
                i = _ref4[_i];
                _results.push(cls.constant_pool.get(i).deref());
              }
              return _results;
            })();
            ifaces = (function() {
              var _i, _len, _results;
              _results = [];
              for (_i = 0, _len = ifaces.length; _i < _len; _i++) {
                i = ifaces[_i];
                _results.push(util.is_string(i) ? c2t(i) : i);
              }
              return _results;
            })();
            iface_objs = (function() {
              var _i, _len, _results;
              _results = [];
              for (_i = 0, _len = ifaces.length; _i < _len; _i++) {
                iface = ifaces[_i];
                _results.push(rs.jclass_obj(iface, true));
              }
              return _results;
            })();
            return rs.init_array('[Ljava/lang/Class;', iface_objs);
          }), o('getModifiers()I', function(rs, _this) {
            return _this.file.access_byte;
          }), o('getRawAnnotations()[B', function(rs, _this) {
            var annotations, cls, m, sig, _ref4;
            cls = _this.file;
            annotations = _.find(cls.attrs, function(a) {
              return a.name === 'RuntimeVisibleAnnotations';
            });
            if (annotations != null) {
              return new JavaArray(rs, c2t('[B'), annotations.raw_bytes);
            }
            _ref4 = cls.methods;
            for (sig in _ref4) {
              m = _ref4[sig];
              annotations = _.find(m.attrs, function(a) {
                return a.name === 'RuntimeVisibleAnnotations';
              });
              if (annotations != null) {
                return new JavaArray(rs, c2t('[B'), annotations.raw_bytes);
              }
            }
            return null;
          }), o('getConstantPool()Lsun/reflect/ConstantPool;', function(rs, _this) {
            var cls;
            cls = _this.file;
            return rs.init_object('sun/reflect/ConstantPool', {
              'sun/reflect/ConstantPool/constantPoolOop': cls.constant_pool
            });
          }), o('getEnclosingMethod0()[L!/!/Object;', function(rs, _this) {
            var cls, em;
            if (!(_this.$type instanceof types.ClassType)) {
              return null;
            }
            cls = _this.file;
            em = _.find(cls.attrs, function(a) {
              return a.name === 'EnclosingMethod';
            });
            if (em == null) {
              return null;
            }
            return exceptions.java_throw(rs, 'java/lang/Error', "native method not finished: java.lang.Class.getEnclosingClass");
          }), o('getDeclaringClass()L!/!/!;', function(rs, _this) {
            var cls, declaring_name, entry, icls, my_class, name, _i, _len, _ref4;
            if (!(_this.$type instanceof types.ClassType)) {
              return null;
            }
            cls = _this.file;
            icls = _.find(cls.attrs, function(a) {
              return a.name === 'InnerClasses';
            });
            if (icls == null) {
              return null;
            }
            my_class = _this.$type.toClassString();
            _ref4 = icls.classes;
            for (_i = 0, _len = _ref4.length; _i < _len; _i++) {
              entry = _ref4[_i];
              if (!(entry.outer_info_index > 0)) {
                continue;
              }
              name = cls.constant_pool.get(entry.inner_info_index).deref();
              if (name !== my_class) {
                continue;
              }
              declaring_name = cls.constant_pool.get(entry.outer_info_index).deref();
              return rs.jclass_obj(c2t(declaring_name), true);
            }
            return null;
          }), o('getDeclaredClasses0()[L!/!/!;', function(rs, _this) {
            var a, c, cls, enclosing_name, icls, iclses, my_class, name, ret, _i, _j, _len, _len1, _ref4;
            ret = new JavaArray(rs, c2t('[Ljava/lang/Class;'), []);
            if (!(_this.$type instanceof types.ClassType)) {
              return ret;
            }
            cls = _this.file;
            my_class = _this.$type.toClassString();
            iclses = (function() {
              var _i, _len, _ref4, _results;
              _ref4 = cls.attrs;
              _results = [];
              for (_i = 0, _len = _ref4.length; _i < _len; _i++) {
                a = _ref4[_i];
                if (a.name === 'InnerClasses') {
                  _results.push(a);
                }
              }
              return _results;
            })();
            for (_i = 0, _len = iclses.length; _i < _len; _i++) {
              icls = iclses[_i];
              _ref4 = icls.classes;
              for (_j = 0, _len1 = _ref4.length; _j < _len1; _j++) {
                c = _ref4[_j];
                if (!(c.outer_info_index > 0)) {
                  continue;
                }
                enclosing_name = cls.constant_pool.get(c.outer_info_index).deref();
                if (enclosing_name !== my_class) {
                  continue;
                }
                name = cls.constant_pool.get(c.inner_info_index).deref();
                ret.array.push(rs.jclass_obj(c2t(name), true));
              }
            }
            return ret;
          })
        ],
        ClassLoader: [
          o('findLoadedClass0(L!/!/String;)L!/!/Class;', function(rs, _this, name) {
            var rv, type;
            type = c2t(util.int_classname(name.jvm2js_str()));
            rv = null;
            try {
              rv = rs.jclass_obj(type, true);
            } catch (e) {
              if (!(e instanceof exceptions.JavaException)) {
                throw e;
              }
            }
            return rv;
          }), o('findBootstrapClass(L!/!/String;)L!/!/Class;', function(rs, _this, name) {
            var type;
            type = c2t(util.int_classname(name.jvm2js_str()));
            return rs.jclass_obj(type, true);
          }), o('getCaller(I)L!/!/Class;', function(rs, i) {
            var type;
            type = rs.meta_stack().get_caller(i).method.class_type;
            return rs.jclass_obj(type, true);
          }), o('defineClass1(L!/!/String;[BIIL!/security/ProtectionDomain;L!/!/String;Z)L!/!/Class;', function(rs, _this, name, bytes, offset, len, pd, source, unused) {
            return native_define_class(rs, name, bytes, offset, len, _this);
          }), o('defineClass1(L!/!/String;[BIIL!/security/ProtectionDomain;L!/!/String;)L!/!/Class;', function(rs, _this, name, bytes, offset, len, pd, source) {
            return native_define_class(rs, name, bytes, offset, len, _this);
          }), o('resolveClass0(L!/!/Class;)V', function(rs, _this, cls) {
            return rs.load_class(cls.$type, true);
          })
        ],
        Compiler: [o('disable()V', function(rs, _this) {}), o('enable()V', function(rs, _this) {})],
        Float: [
          o('floatToRawIntBits(F)I', function(rs, f_val) {
            var exp, f_val_orig, f_view, i_view, sig, sign, value;
            if (typeof Float32Array !== "undefined" && Float32Array !== null) {
              f_view = new Float32Array([f_val]);
              i_view = new Int32Array(f_view.buffer);
              return i_view[0];
            }
            if (f_val === 0) {
              return 0;
            }
            sign = f_val < 0 ? 1 : 0;
            f_val_orig = f_val;
            f_val = Math.abs(f_val);
            if (f_val <= 1.1754942106924411e-38 && f_val >= 1.4012984643248170e-45) {
              exp = 0;
              sig = Math.round((f_val / Math.pow(2, -126)) * Math.pow(2, 23));
              value = (sign << 31) | (exp << 23) | sig;
              return (sign << 31) | (exp << 23) | sig;
            } else {
              exp = Math.floor(Math.log(f_val) / Math.LN2);
              sig = Math.round((f_val / Math.pow(2, exp) - 1) * Math.pow(2, 23));
              value = (sign << 31) | ((exp + 127) << 23) | sig;
              return (sign << 31) | ((exp + 127) << 23) | sig;
            }
          }), o('intBitsToFloat(I)F', function(rs, i_val) {
            return util.intbits2float(i_val);
          })
        ],
        Double: [
          o('doubleToRawLongBits(D)J', function(rs, d_val) {
            var d_view, exp, i_view, sig, sign;
            if (typeof Float64Array !== "undefined" && Float64Array !== null) {
              d_view = new Float64Array([d_val]);
              i_view = new Uint32Array(d_view.buffer);
              return gLong.fromBits(i_view[0], i_view[1]);
            }
            if (d_val === 0 || isNaN(d_val) || !isFinite(d_val)) {
              return gLong.ZERO;
            }
            sign = d_val < 0 ? gLong.ONE : gLong.ZERO;
            d_val = Math.abs(d_val);
            exp = gLong.fromNumber(Math.floor(Math.log(d_val) / Math.LN2));
            sig = gLong.fromNumber((d_val / Math.pow(2, exp.toInt()) - 1) * Math.pow(2, 52));
            exp = exp.add(gLong.fromInt(1023));
            return sign.shiftLeft(63).add(exp.shiftLeft(52)).add(sig);
          }), o('longBitsToDouble(J)D', function(rs, l_val) {
            return util.longbits2double(l_val.getHighBits(), l_val.getLowBitsUnsigned());
          })
        ],
        Object: [
          o('getClass()L!/!/Class;', function(rs, _this) {
            return rs.jclass_obj(_this.type, false);
          }), o('hashCode()I', function(rs, _this) {
            return _this.ref;
          }), o('clone()L!/!/!;', function(rs, _this) {
            return _this.clone(rs);
          }), o('notify()V', function(rs, _this) {
            var locker, owner;
            debug("TE(notify): on lock *" + _this.ref);
            if ((locker = rs.lock_refs[_this]) != null) {
              if (locker !== rs.curr_thread) {
                owner = thread_name(rs, locker);
                exceptions.java_throw(rs, 'java/lang/IllegalMonitorStateException', "Thread '" + owner + "' owns this monitor");
              }
            }
            if (rs.waiting_threads[_this] != null) {
              return rs.waiting_threads[_this].shift();
            }
          }), o('notifyAll()V', function(rs, _this) {
            var locker, owner;
            debug("TE(notifyAll): on lock *" + _this.ref);
            if ((locker = rs.lock_refs[_this]) != null) {
              if (locker !== rs.curr_thread) {
                owner = thread_name(rs, locker);
                exceptions.java_throw(rs, 'java/lang/IllegalMonitorStateException', "Thread '" + owner + "' owns this monitor");
              }
            }
            if (rs.waiting_threads[_this] != null) {
              return rs.waiting_threads[_this] = [];
            }
          }), o('wait(J)V', function(rs, _this, timeout) {
            var locker, owner;
            if (timeout !== gLong.ZERO) {
              error("TODO(Object::wait): respect the timeout param (" + timeout + ")");
            }
            if ((locker = rs.lock_refs[_this]) != null) {
              if (locker !== rs.curr_thread) {
                owner = thread_name(rs, locker);
                exceptions.java_throw(rs, 'java/lang/IllegalMonitorStateException', "Thread '" + owner + "' owns this monitor");
              }
            }
            rs.lock_refs[_this] = null;
            return rs.wait(_this);
          })
        ],
        Package: [
          o('getSystemPackage0(Ljava/lang/String;)Ljava/lang/String;', function(rs) {
            return null;
          })
        ],
        ProcessEnvironment: [
          o('environ()[[B', function(rs) {
            var env_arr, k, v, _ref4;
            env_arr = [];
            _ref4 = process.env;
            for (k in _ref4) {
              v = _ref4[k];
              env_arr.push(new JavaArray(rs, c2t('[B'), util.bytestr_to_array(k)));
              env_arr.push(new JavaArray(rs, c2t('[B'), util.bytestr_to_array(v)));
            }
            return new JavaArray(rs, c2t('[[B'), env_arr);
          })
        ],
        reflect: {
          Array: [
            o('newArray(L!/!/Class;I)L!/!/Object;', function(rs, _this, len) {
              return rs.heap_newarray(_this.$type, len);
            }), o('getLength(Ljava/lang/Object;)I', function(rs, arr) {
              return rs.check_null(arr).array.length;
            })
          ],
          Proxy: [
            o('defineClass0(L!/!/ClassLoader;L!/!/String;[BII)L!/!/Class;', function(rs, cl, name, bytes, offset, len) {
              return native_define_class(rs, name, bytes, offset, len, cl);
            })
          ]
        },
        Runtime: [
          o('availableProcessors()I', function() {
            return 1;
          }), o('gc()V', function(rs) {
            rs.curr_frame().runner = function() {
              return rs.meta_stack().pop();
            };
            throw new exceptions.YieldIOException(function(cb) {
              return setTimeout(cb, 0);
            });
          })
        ],
        Shutdown: [
          o('halt0(I)V', function(rs, status) {
            throw new exceptions.HaltException(status);
          })
        ],
        StrictMath: [
          o('acos(D)D', function(rs, d_val) {
            return Math.acos(d_val);
          }), o('asin(D)D', function(rs, d_val) {
            return Math.asin(d_val);
          }), o('atan(D)D', function(rs, d_val) {
            return Math.atan(d_val);
          }), o('atan2(DD)D', function(rs, y, x) {
            return Math.atan2(y, x);
          }), o('cos(D)D', function(rs, d_val) {
            return Math.cos(d_val);
          }), o('exp(D)D', function(rs, d_val) {
            return Math.exp(d_val);
          }), o('log(D)D', function(rs, d_val) {
            return Math.log(d_val);
          }), o('pow(DD)D', function(rs) {
            return Math.pow(rs.cl(0), rs.cl(2));
          }), o('sin(D)D', function(rs, d_val) {
            return Math.sin(d_val);
          }), o('sqrt(D)D', function(rs, d_val) {
            return Math.sqrt(d_val);
          }), o('tan(D)D', function(rs, d_val) {
            return Math.tan(d_val);
          }), o('floor(D)D', function(rs, d_val) {
            return Math.floor(d_val);
          }), o('ceil(D)D', function(rs, d_val) {
            return Math.ceil(d_val);
          })
        ],
        String: [
          o('intern()L!/!/!;', function(rs, _this) {
            var js_str, s;
            js_str = _this.jvm2js_str();
            if ((s = rs.string_pool.get(js_str)) == null) {
              s = rs.string_pool.set(js_str, _this);
            }
            return s;
          })
        ],
        System: [
          o('arraycopy(L!/!/Object;IL!/!/Object;II)V', function(rs, src, src_pos, dest, dest_pos, length) {
            if (!(src != null) || !(dest != null)) {
              exceptions.java_throw(rs, 'java/lang/NullPointerException', 'Cannot copy to/from a null array.');
            }
            if (!(src.type instanceof types.ArrayType) || !(dest.type instanceof types.ArrayType)) {
              exceptions.java_throw(rs, 'java/lang/ArrayStoreException', 'src and dest arguments must be of array type.');
            }
            if (src_pos < 0 || (src_pos + length) > src.array.length || dest_pos < 0 || (dest_pos + length) > dest.array.length || length < 0) {
              exceptions.java_throw(rs, 'java/lang/ArrayIndexOutOfBoundsException', 'Tried to write to an illegal index in an array.');
            }
            if (src === dest) {
              src = {
                type: src.type,
                array: src.array.slice(src_pos, src_pos + length)
              };
              src_pos = 0;
            }
            if (types.is_castable(rs, src.type, dest.type)) {
              return arraycopy_no_check(src, src_pos, dest, dest_pos, length);
            } else {
              if ((src.type.component_type instanceof types.PrimitiveType) || (dest.type.component_type instanceof types.PrimitiveType)) {
                return exceptions.java_throw(rs, 'java/lang/ArrayStoreException', 'If calling arraycopy with a primitive array, both src and dest must be of the same primitive type.');
              } else {
                return arraycopy_check(rs, src, src_pos, dest, dest_pos, length);
              }
            }
          }), o('currentTimeMillis()J', function(rs) {
            return gLong.fromNumber((new Date).getTime());
          }), o('identityHashCode(L!/!/Object;)I', function(rs, x) {
            var _ref4;
            return (_ref4 = x != null ? x.ref : void 0) != null ? _ref4 : 0;
          }), o('initProperties(L!/util/Properties;)L!/util/Properties;', function(rs, props) {
            return rs.push(null);
          }), o('nanoTime()J', function(rs) {
            return gLong.fromNumber((new Date).getTime()).multiply(gLong.fromNumber(1000000));
          }), o('setIn0(L!/io/InputStream;)V', function(rs, stream) {
            rs.push(stream);
            return rs.static_put({
              "class": 'java/lang/System',
              name: 'in'
            });
          }), o('setOut0(L!/io/PrintStream;)V', function(rs, stream) {
            rs.push(stream);
            return rs.static_put({
              "class": 'java/lang/System',
              name: 'out'
            });
          }), o('setErr0(L!/io/PrintStream;)V', function(rs, stream) {
            rs.push(stream);
            return rs.static_put({
              "class": 'java/lang/System',
              name: 'err'
            });
          })
        ],
        Thread: [
          o('currentThread()L!/!/!;', function(rs) {
            return rs.curr_thread;
          }), o('setPriority0(I)V', function(rs) {}), o('holdsLock(L!/!/Object;)Z', function(rs, obj) {
            return rs.curr_thread === rs.lock_refs[obj];
          }), o('isAlive()Z', function(rs, _this) {
            var _ref4;
            return (_ref4 = _this.$isAlive) != null ? _ref4 : false;
          }), o('isInterrupted(Z)Z', function(rs, _this, clear_flag) {
            var tmp, _ref4;
            tmp = (_ref4 = _this.$isInterrupted) != null ? _ref4 : false;
            if (clear_flag) {
              _this.$isInterrupted = false;
            }
            return tmp;
          }), o('interrupt0()V', function(rs, _this) {
            var new_thread_sf;
            _this.$isInterrupted = true;
            debug("TE(interrupt0): interrupting " + (thread_name(rs, _this)));
            new_thread_sf = util.last(_this.$meta_stack._cs);
            new_thread_sf.runner = function() {
              return new_thread_sf.method.run_manually((function() {
                return exceptions.java_throw(rs, 'java/lang/InterruptedException', 'interrupt0 called');
              }), rs, []);
            };
            _this.$meta_stack.push({});
            return rs["yield"](_this);
          }), o('start0()V', function(rs, _this) {
            var new_thread_sf, old_thread_sf, run_method, thread_runner_sf;
            _this.$isAlive = true;
            _this.$meta_stack = new runtime.CallStack();
            rs.thread_pool.push(_this);
            old_thread_sf = rs.curr_frame();
            debug("TE(start0): starting " + (thread_name(rs, _this)) + " from " + (thread_name(rs, rs.curr_thread)));
            rs.curr_thread = _this;
            new_thread_sf = rs.curr_frame();
            rs.push(_this);
            run_method = rs.method_lookup({
              "class": _this.type.toClassString(),
              sig: 'run()V'
            });
            thread_runner_sf = run_method.setup_stack(rs);
            new_thread_sf.runner = function() {
              new_thread_sf.runner = null;
              _this.$isAlive = false;
              return debug("TE(start0): thread died: " + (thread_name(rs, _this)));
            };
            old_thread_sf.runner = function() {
              debug("TE(start0): thread resumed: " + (thread_name(rs, rs.curr_thread)));
              return rs.meta_stack().pop();
            };
            throw exceptions.ReturnException;
          }), o('sleep(J)V', function(rs, millis) {
            rs.curr_frame().runner = function() {
              return rs.meta_stack().pop();
            };
            throw new exceptions.YieldIOException(function(cb) {
              return setTimeout(cb, millis.toNumber());
            });
          }), o('yield()V', function(rs, _this) {
            return rs["yield"]();
          })
        ]
      },
      security: {
        AccessController: [
          o('doPrivileged(L!/!/PrivilegedAction;)L!/lang/Object;', doPrivileged), o('doPrivileged(L!/!/PrivilegedAction;L!/!/AccessControlContext;)L!/lang/Object;', doPrivileged), o('doPrivileged(L!/!/PrivilegedExceptionAction;)L!/lang/Object;', doPrivileged), o('doPrivileged(L!/!/PrivilegedExceptionAction;L!/!/AccessControlContext;)L!/lang/Object;', doPrivileged), o('getStackAccessControlContext()Ljava/security/AccessControlContext;', function(rs) {
            return null;
          })
        ]
      },
      io: {
        Console: [
          o('encoding()L!/lang/String;', function() {
            return null;
          }), o('istty()Z', function() {
            return true;
          })
        ],
        FileSystem: [
          o('getFileSystem()L!/!/!;', function(rs) {
            var cache1, cache2, cache_init, my_sf;
            my_sf = rs.curr_frame();
            cache1 = rs.init_object('java/io/ExpiringCache');
            cache2 = rs.init_object('java/io/ExpiringCache');
            cache_init = rs.method_lookup({
              "class": 'java/io/ExpiringCache',
              sig: '<init>()V'
            });
            rs.push2(cache1, cache2);
            cache_init.setup_stack(rs);
            my_sf.runner = function() {
              cache_init.setup_stack(rs);
              my_sf.runner = function() {
                var rv;
                rv = rs.init_object('java/io/UnixFileSystem', {
                  'java/io/UnixFileSystem/cache': cache1,
                  'java/io/UnixFileSystem/javaHomePrefixCache': cache2,
                  'java/io/UnixFileSystem/slash': system_properties['file.separator'].charCodeAt(0),
                  'java/io/UnixFileSystem/colon': system_properties['path.separator'].charCodeAt(0),
                  'java/io/UnixFileSystem/javaHome': rs.init_string(system_properties['java.home'], true)
                });
                rs.meta_stack().pop();
                return rs.push(rv);
              };
              throw exceptions.ReturnException;
            };
            throw exceptions.ReturnException;
          })
        ],
        FileOutputStream: [
          o('open(L!/lang/String;)V', function(rs, _this, fname) {
            return _this.$file = fs.openSync(fname.jvm2js_str(), 'w');
          }), o('writeBytes([BIIZ)V', write_to_file), o('writeBytes([BII)V', write_to_file), o('close0()V', function(rs, _this) {
            if (_this.$file != null) {
              fs.closeSync(_this.$file);
            }
            return _this.$file = 'closed';
          })
        ],
        FileInputStream: [
          o('available()I', function(rs, _this) {
            var stats;
            if (_this.$file === 'closed') {
              exceptions.java_throw(rs, 'java/io/IOException', "Bad file descriptor");
            }
            if (_this.$file == null) {
              return 0;
            }
            stats = fs.fstatSync(_this.$file);
            return stats.size - _this.$pos;
          }), o('read()I', function(rs, _this) {
            var buf, bytes_read, data, file;
            if (_this.$file === 'closed') {
              exceptions.java_throw(rs, 'java/io/IOException', "Bad file descriptor");
            }
            if ((file = _this.$file) != null) {
              buf = new Buffer((fs.fstatSync(file)).size);
              bytes_read = fs.readSync(file, buf, 0, 1, _this.$pos);
              _this.$pos++;
              if (bytes_read === 0) {
                return -1;
              } else {
                return buf.readUInt8(0);
              }
            }
            data = null;
            rs.curr_frame().runner = function() {
              rs.meta_stack().pop();
              return rs.push(data.length === 0 ? -1 : data.charCodeAt(0));
            };
            throw new exceptions.YieldIOException(function(cb) {
              return rs.async_input(1, function(byte) {
                data = byte;
                return cb();
              });
            });
          }), o('readBytes([BII)I', function(rs, _this, byte_arr, offset, n_bytes) {
            var buf, bytes_read, file, i, pos, result, _i;
            if (_this.$file === 'closed') {
              exceptions.java_throw(rs, 'java/io/IOException', "Bad file descriptor");
            }
            if (_this.$file != null) {
              pos = _this.$pos;
              file = _this.$file;
              buf = new Buffer(n_bytes);
              if (pos >= fs.fstatSync(file).size - 1) {
                return -1;
              }
              bytes_read = fs.readSync(file, buf, 0, n_bytes, pos);
              _this.$pos += bytes_read;
              for (i = _i = 0; _i < bytes_read; i = _i += 1) {
                byte_arr.array[offset + i] = buf.readUInt8(i);
              }
              if (bytes_read === 0 && n_bytes !== 0) {
                return -1;
              } else {
                return bytes_read;
              }
            }
            result = null;
            rs.curr_frame().runner = function() {
              rs.meta_stack().pop();
              return rs.push(result);
            };
            throw new exceptions.YieldIOException(function(cb) {
              return rs.async_input(n_bytes, function(bytes) {
                var b, idx, _j, _len;
                for (idx = _j = 0, _len = bytes.length; _j < _len; idx = ++_j) {
                  b = bytes[idx];
                  byte_arr.array[offset + idx] = b;
                }
                result = bytes.length;
                return cb();
              });
            });
          }), o('open(Ljava/lang/String;)V', function(rs, _this, filename) {
            var filepath;
            filepath = filename.jvm2js_str();
            try {
              _this.$file = fs.openSync(filepath, 'r');
              return _this.$pos = 0;
            } catch (e) {
              if (e.code === 'ENOENT') {
                return exceptions.java_throw(rs, 'java/io/FileNotFoundException', "Could not open file " + filepath);
              } else {
                throw e;
              }
            }
          }), o('close0()V', function(rs, _this) {
            if (_this.$file != null) {
              fs.closeSync(_this.$file);
            }
            return _this.$file = 'closed';
          }), o('skip(J)J', function(rs, _this, n_bytes) {
            var bytes_left, file, num_skipped, to_skip;
            if (_this.$file === 'closed') {
              exceptions.java_throw(rs, 'java/io/IOException', "Bad file descriptor");
            }
            if ((file = _this.$file) != null) {
              bytes_left = fs.fstatSync(file).size - _this.$pos;
              to_skip = Math.min(n_bytes.toNumber(), bytes_left);
              _this.$pos += to_skip;
              return gLong.fromNumber(to_skip);
            }
            num_skipped = null;
            rs.curr_frame().runner = function() {
              rs.meta_stack().pop();
              return rs.push(gLong.fromNumber(num_skipped));
            };
            throw new exceptions.YieldIOException(function(cb) {
              return rs.async_input(n_bytes.toNumber(), function(bytes) {
                num_skipped = bytes.length;
                return cb();
              });
            });
          })
        ],
        ObjectStreamClass: [o('initNative()V', function(rs) {})],
        RandomAccessFile: [
          o('open(Ljava/lang/String;I)V', function(rs, _this, filename, mode) {
            var filepath;
            filepath = filename.jvm2js_str();
            try {
              _this.$file = fs.openSync(filepath, 'r');
            } catch (e) {
              if (e.code === 'ENOENT') {
                exceptions.java_throw(rs, 'java/io/FileNotFoundException', "Could not open file " + filepath);
              } else {
                throw e;
              }
            }
            return _this.$pos = 0;
          }), o('getFilePointer()J', function(rs, _this) {
            return gLong.fromNumber(_this.$pos);
          }), o('length()J', function(rs, _this) {
            var stats;
            stats = stat_file(_this.$file);
            return gLong.fromNumber(stats.size);
          }), o('seek(J)V', function(rs, _this, pos) {
            return _this.$pos = pos;
          }), o('readBytes([BII)I', function(rs, _this, byte_arr, offset, len) {
            var buf, bytes_read, file, i, pos, _i;
            pos = _this.$pos.toNumber();
            file = _this.$file;
            if (pos >= fs.fstatSync(file).size - 1) {
              return -1;
            }
            buf = new Buffer(len);
            bytes_read = fs.readSync(file, buf, 0, len, pos);
            for (i = _i = 0; _i < bytes_read; i = _i += 1) {
              byte_arr.array[offset + i] = buf.readUInt8(i);
            }
            _this.$pos = gLong.fromNumber(pos + bytes_read);
            if (bytes_read === 0 && len !== 0) {
              return -1;
            } else {
              return bytes_read;
            }
          }), o('close0()V', function(rs, _this) {
            fs.closeSync(_this.$file);
            return _this.$file = null;
          })
        ],
        UnixFileSystem: [
          o('canonicalize0(L!/lang/String;)L!/lang/String;', function(rs, _this, jvm_path_str) {
            var js_str;
            js_str = jvm_path_str.jvm2js_str();
            return rs.init_string(path.resolve(path.normalize(js_str)));
          }), o('checkAccess(Ljava/io/File;I)Z', function(rs, _this, file, access) {
            var filepath, mask, stats;
            filepath = file.get_field(rs, 'java/io/File/path');
            stats = stat_file(filepath.jvm2js_str());
            if (stats == null) {
              return false;
            }
            mask = access | (access << 3) | (access << 6);
            return (stats.mode & mask) > 0;
          }), o('createDirectory(Ljava/io/File;)Z', function(rs, _this, file) {
            var filepath;
            filepath = (file.get_field(rs, 'java/io/File/path')).jvm2js_str();
            if (stat_file(filepath) != null) {
              return false;
            }
            try {
              fs.mkdirSync(filepath);
            } catch (e) {
              return false;
            }
            return true;
          }), o('createFileExclusively(Ljava/lang/String;)Z', function(rs, _this, path) {
            var filepath;
            filepath = path.jvm2js_str();
            if (stat_file(filepath) != null) {
              return false;
            }
            try {
              fs.closeSync(fs.openSync(filepath, 'w'));
            } catch (e) {
              exceptions.java_throw(rs, 'java/io/IOException', e.message);
            }
            return true;
          }), o('createFileExclusively(Ljava/lang/String;Z)Z', function(rs, _this, path) {
            var filepath;
            filepath = path.jvm2js_str();
            if (stat_file(filepath) != null) {
              return false;
            }
            try {
              fs.closeSync(fs.openSync(filepath, 'w'));
            } catch (e) {
              exceptions.java_throw(rs, 'java/io/IOException', e.message);
            }
            return true;
          }), o('delete0(Ljava/io/File;)Z', function(rs, _this, file) {
            var filepath, stats;
            filepath = (file.get_field(rs, 'java/io/File/path')).jvm2js_str();
            stats = stat_file(filepath);
            if (stats == null) {
              return false;
            }
            try {
              if (stats.isDirectory()) {
                if ((fs.readdirSync(filepath)).length > 0) {
                  return false;
                }
                fs.rmdirSync(filepath);
              } else {
                fs.unlinkSync(filepath);
              }
            } catch (e) {
              return false;
            }
            return true;
          }), o('getBooleanAttributes0(Ljava/io/File;)I', function(rs, _this, file) {
            var filepath, stats;
            filepath = file.get_field(rs, 'java/io/File/path');
            stats = stat_file(filepath.jvm2js_str());
            if (stats == null) {
              return 0;
            }
            if (stats.isFile()) {
              return 3;
            } else if (stats.isDirectory()) {
              return 5;
            } else {
              return 1;
            }
          }), o('getLastModifiedTime(Ljava/io/File;)J', function(rs, _this, file) {
            var filepath, stats;
            filepath = file.get_field(rs, 'java/io/File/path').jvm2js_str();
            stats = stat_file(filepath);
            if (stats == null) {
              return gLong.ZERO;
            }
            return gLong.fromNumber((new Date(stats.mtime)).getTime());
          }), o('getLength(Ljava/io/File;)J', function(rs, _this, file) {
            var filepath, length;
            filepath = file.get_field(rs, 'java/io/File/path');
            try {
              length = fs.statSync(filepath.jvm2js_str()).size;
            } catch (e) {
              length = 0;
            }
            return gLong.fromNumber(length);
          }), o('list(Ljava/io/File;)[Ljava/lang/String;', function(rs, _this, file) {
            var f, filepath, files;
            filepath = file.get_field(rs, 'java/io/File/path');
            try {
              files = fs.readdirSync(filepath.jvm2js_str());
            } catch (e) {
              return null;
            }
            return rs.init_array('[Ljava/lang/String;', (function() {
              var _i, _len, _results;
              _results = [];
              for (_i = 0, _len = files.length; _i < _len; _i++) {
                f = files[_i];
                _results.push(rs.init_string(f));
              }
              return _results;
            })());
          }), o('rename0(Ljava/io/File;Ljava/io/File;)Z', function(rs, _this, file1, file2) {
            var file1path, file2path;
            file1path = (file1.get_field(rs, 'java/io/File/path')).jvm2js_str();
            file2path = (file2.get_field(rs, 'java/io/File/path')).jvm2js_str();
            try {
              fs.renameSync(file1path, file2path);
            } catch (e) {
              return false;
            }
            return true;
          }), o('setPermission(Ljava/io/File;IZZ)Z', function(rs, _this, file, access, enable, owneronly) {
            var existing_access, filepath, stats;
            filepath = (file.get_field(rs, 'java/io/File/path')).jvm2js_str();
            if (owneronly) {
              access <<= 6;
            } else {
              access |= (access << 6) | (access << 3);
            }
            if (!enable) {
              access = ~access;
            }
            try {
              stats = stat_file(filepath);
              if (stats == null) {
                return false;
              }
              existing_access = stats.mode;
              access = enable ? existing_access | access : existing_access & access;
              fs.chmodSync(filepath, access);
            } catch (e) {
              return false;
            }
            return true;
          }), o('setReadOnly(Ljava/io/File;)Z', function(rs, _this, file) {
            var filepath, mask, stats;
            filepath = (file.get_field(rs, 'java/io/File/path')).jvm2js_str();
            mask = ~0x92;
            try {
              stats = stat_file(filepath);
              if (stats == null) {
                return false;
              }
              fs.chmodSync(filepath, stats.mode & mask);
            } catch (e) {
              return false;
            }
            return true;
          })
        ]
      },
      util: {
        concurrent: {
          atomic: {
            AtomicLong: [
              o('VMSupportsCS8()Z', function() {
                return true;
              })
            ]
          }
        },
        jar: {
          JarFile: [
            o('getMetaInfEntryNames()[L!/lang/String;', function(rs) {
              return null;
            })
          ]
        },
        ResourceBundle: [
          o('getClassContext()[L!/lang/Class;', function(rs) {
            return rs.init_array('[Ljava/lang/Class;', [null, null, null]);
          })
        ],
        TimeZone: [
          o('getSystemTimeZoneID(L!/lang/String;L!/lang/String;)L!/lang/String;', function(rs, java_home, country) {
            return rs.init_string('GMT');
          }), o('getSystemGMTOffsetID()L!/lang/String;', function(rs) {
            return null;
          })
        ]
      }
    },
    sun: {
      management: {
        VMManagementImpl: [
          o('getStartupTime()J', function(rs) {
            return rs.startup_time;
          }), o('getVersion0()Ljava/lang/String;', function(rs) {
            return rs.init_string("1.2", true);
          }), o('initOptionalSupportFields()V', function(rs) {
            var field_names, name, _i, _len, _results;
            field_names = ['compTimeMonitoringSupport', 'threadContentionMonitoringSupport', 'currentThreadCpuTimeSupport', 'otherThreadCpuTimeSupport', 'bootClassPathSupport', 'objectMonitorUsageSupport', 'synchronizerUsageSupport'];
            _results = [];
            for (_i = 0, _len = field_names.length; _i < _len; _i++) {
              name = field_names[_i];
              rs.push(0);
              _results.push(rs.static_put({
                "class": 'sun/management/VMManagementImpl',
                name: name
              }));
            }
            return _results;
          }), o('isThreadAllocatedMemoryEnabled()Z', function() {
            return false;
          }), o('isThreadContentionMonitoringEnabled()Z', function() {
            return false;
          }), o('isThreadCpuTimeEnabled()Z', function() {
            return false;
          }), o('getAvailableProcessors()I', function() {
            return 1;
          }), o('getProcessId()I', function() {
            return 1;
          })
        ],
        MemoryImpl: [
          o('getMemoryManagers0()[Ljava/lang/management/MemoryManagerMXBean;', function(rs) {
            return rs.init_array('[Lsun/management/MemoryManagerImpl;', []);
          }), o('getMemoryPools0()[Ljava/lang/management/MemoryPoolMXBean;', function(rs) {
            return rs.init_array('[Lsun/management/MemoryPoolImpl;', []);
          })
        ]
      },
      misc: {
        VM: [
          o('initialize()V', function(rs) {
            var vm_cls;
            vm_cls = rs.class_lookup(c2t('sun/misc/VM'));
            if (!(vm_cls.major_version >= 51)) {
              return;
            }
            rs.push(rs.static_get({
              "class": 'java/lang/System',
              name: 'props'
            }));
            return rs.static_put({
              "class": 'sun/misc/VM',
              name: 'savedProps'
            });
          })
        ],
        Unsafe: [
          o('addressSize()I', function(rs, _this) {
            return 4;
          }), o('allocateInstance(Ljava/lang/Class;)Ljava/lang/Object;', function(rs, _this, cls) {
            return rs.init_object(cls.$type.toClassString(), {});
          }), o('allocateMemory(J)J', function(rs, _this, size) {
            var next_addr;
            next_addr = util.last(rs.mem_start_addrs);
            rs.mem_blocks[next_addr] = new DataView(new ArrayBuffer(size));
            rs.mem_start_addrs.push(next_addr + size);
            return gLong.fromNumber(next_addr);
          }), o('setMemory(JJB)V', function(rs, _this, address, bytes, value) {
            var block_addr, i, _i, _results;
            block_addr = rs.block_addr(address);
            _results = [];
            for (i = _i = 0; _i < bytes; i = _i += 1) {
              _results.push(rs.mem_blocks[block_addr].setInt8(i, value));
            }
            return _results;
          }), o('freeMemory(J)V', function(rs, _this, address) {
            delete rs.mem_blocks[address.toNumber()];
            return rs.mem_start_addrs.splice(rs.mem_start_addrs.indexOf(address), 1);
          }), o('putLong(JJ)V', function(rs, _this, address, value) {
            var block_addr, offset;
            block_addr = rs.block_addr(address);
            offset = address - block_addr;
            rs.mem_blocks[block_addr].setInt32(offset, value.getLowBits(), true);
            return rs.mem_blocks[block_addr].setInt32(offset + 4, value.getHighBits, true);
          }), o('getByte(J)B', function(rs, _this, address) {
            var block_addr;
            block_addr = rs.block_addr(address);
            return rs.mem_blocks[block_addr].getInt8(address - block_addr);
          }), o('arrayBaseOffset(Ljava/lang/Class;)I', function(rs, _this, cls) {
            return 0;
          }), o('arrayIndexScale(Ljava/lang/Class;)I', function(rs, _this, cls) {
            return 1;
          }), o('compareAndSwapObject(Ljava/lang/Object;JLjava/lang/Object;Ljava/lang/Object;)Z', unsafe_compare_and_swap), o('compareAndSwapInt(Ljava/lang/Object;JII)Z', unsafe_compare_and_swap), o('compareAndSwapLong(Ljava/lang/Object;JJJ)Z', unsafe_compare_and_swap), o('ensureClassInitialized(Ljava/lang/Class;)V', function(rs, _this, cls) {
            return rs.class_lookup(cls.$type);
          }), o('staticFieldOffset(Ljava/lang/reflect/Field;)J', function(rs, _this, field) {
            return gLong.fromNumber(field.get_field(rs, 'java/lang/reflect/Field/slot'));
          }), o('objectFieldOffset(Ljava/lang/reflect/Field;)J', function(rs, _this, field) {
            return gLong.fromNumber(field.get_field(rs, 'java/lang/reflect/Field/slot'));
          }), o('staticFieldBase(Ljava/lang/reflect/Field;)Ljava/lang/Object;', function(rs, _this, field) {
            var cls;
            cls = field.get_field(rs, 'java/lang/reflect/Field/clazz');
            return new JavaObject(rs, cls.$type, rs.class_lookup(cls.$type));
          }), o('getObjectVolatile(Ljava/lang/Object;J)Ljava/lang/Object;', function(rs, _this, obj, offset) {
            return obj.get_field_from_offset(rs, offset);
          }), o('getObject(Ljava/lang/Object;J)Ljava/lang/Object;', function(rs, _this, obj, offset) {
            return obj.get_field_from_offset(rs, offset);
          }), o('putObject(Ljava/lang/Object;JLjava/lang/Object;)V', function(rs, _this, obj, offset, new_obj) {
            return obj.set_field_from_offset(rs, offset, new_obj);
          }), o('putOrderedObject(Ljava/lang/Object;JLjava/lang/Object;)V', function(rs, _this, obj, offset, new_obj) {
            return obj.set_field_from_offset(rs, offset, new_obj);
          }), o('defineClass(Ljava/lang/String;[BIILjava/lang/ClassLoader;Ljava/security/ProtectionDomain;)Ljava/lang/Class;', function(rs, _this, name, bytes, offset, len, loader, pd) {
            return native_define_class(rs, name, bytes, offset, len, loader);
          })
        ]
      },
      reflect: {
        ConstantPool: [
          o('getLongAt0(Ljava/lang/Object;I)J', function(rs, _this, cp, idx) {
            return cp.get(idx).value;
          }), o('getUTF8At0(Ljava/lang/Object;I)Ljava/lang/String;', function(rs, _this, cp, idx) {
            return rs.init_string(cp.get(idx).value);
          })
        ],
        NativeMethodAccessorImpl: [
          o('invoke0(Ljava/lang/reflect/Method;Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;', function(rs, m, obj, params) {
            var cls, method, my_sf, sig, slot;
            cls = m.get_field(rs, 'java/lang/reflect/Method/clazz');
            slot = m.get_field(rs, 'java/lang/reflect/Method/slot');
            method = ((function() {
              var _ref4, _results;
              _ref4 = rs.class_lookup(cls.$type, true).methods;
              _results = [];
              for (sig in _ref4) {
                method = _ref4[sig];
                if (method.idx === slot) {
                  _results.push(method);
                }
              }
              return _results;
            })())[0];
            my_sf = rs.curr_frame();
            if (!method.access_flags["static"]) {
              rs.push(obj);
            }
            rs.push_array(params.array);
            method.setup_stack(rs);
            my_sf.runner = function() {
              var rv;
              rv = rs.pop();
              rs.meta_stack().pop();
              return rs.push(rv);
            };
            throw exceptions.ReturnException;
          })
        ],
        NativeConstructorAccessorImpl: [
          o('newInstance0(Ljava/lang/reflect/Constructor;[Ljava/lang/Object;)Ljava/lang/Object;', function(rs, m, params) {
            var cls, method, my_sf, obj, sig, slot;
            cls = m.get_field(rs, 'java/lang/reflect/Constructor/clazz');
            slot = m.get_field(rs, 'java/lang/reflect/Constructor/slot');
            method = ((function() {
              var _ref4, _results;
              _ref4 = rs.class_lookup(cls.$type, true).methods;
              _results = [];
              for (sig in _ref4) {
                method = _ref4[sig];
                if (method.idx === slot) {
                  _results.push(method);
                }
              }
              return _results;
            })())[0];
            my_sf = rs.curr_frame();
            rs.push((obj = new JavaObject(rs, cls.$type, rs.class_lookup(cls.$type))));
            if (params != null) {
              rs.push_array(params.array);
            }
            method.setup_stack(rs);
            my_sf.runner = function() {
              rs.meta_stack().pop();
              return rs.push(obj);
            };
            throw exceptions.ReturnException;
          })
        ],
        Reflection: [
          o('getCallerClass(I)Ljava/lang/Class;', function(rs, frames_to_skip) {
            var caller, type;
            caller = rs.meta_stack().get_caller(frames_to_skip);
            type = caller.method.class_type;
            return rs.jclass_obj(type, true);
          }), o('getClassAccessFlags(Ljava/lang/Class;)I', function(rs, class_obj) {
            return class_obj.file.access_byte;
          })
        ]
      }
    }
  };

  flatten_pkg = function(pkg) {
    var pkg_name_arr, rec_flatten, result;
    result = {};
    pkg_name_arr = [];
    rec_flatten = function(pkg) {
      var flattened_inner, fn, fn_name, full_name, full_pkg_name, inner_pkg, method, pkg_name, _i, _len, _results;
      _results = [];
      for (pkg_name in pkg) {
        inner_pkg = pkg[pkg_name];
        pkg_name_arr.push(pkg_name);
        if (inner_pkg instanceof Array) {
          full_pkg_name = pkg_name_arr.join('/');
          for (_i = 0, _len = inner_pkg.length; _i < _len; _i++) {
            method = inner_pkg[_i];
            fn_name = method.fn_name, fn = method.fn;
            fn_name = fn_name.replace(/!|;/g, (function() {
              var depth;
              depth = 0;
              return function(c) {
                if (c === '!') {
                  return pkg_name_arr[depth++];
                } else if (c === ';') {
                  depth = 0;
                  return c;
                } else {
                  return c;
                }
              };
            })());
            full_name = "" + full_pkg_name + "::" + fn_name;
            result[full_name] = fn;
          }
        } else {
          flattened_inner = rec_flatten(inner_pkg);
        }
        _results.push(pkg_name_arr.pop(pkg_name));
      }
      return _results;
    };
    rec_flatten(pkg);
    return result;
  };

  root.trapped_methods = flatten_pkg(trapped_methods);

  root.native_methods = flatten_pkg(native_methods);

}).call(this);
