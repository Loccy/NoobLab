// Generated by CoffeeScript 1.3.3
(function() {
  var gLong, root, _ref, _ref1,
    __slice = [].slice;

  gLong = require('../vendor/gLong.js');

  "use strict";


  root = typeof exports !== "undefined" && exports !== null ? exports : (_ref = window.logging) != null ? _ref : window.logging = {};

  root.debug_vars = function(arr) {
    return arr.map(function(e) {
      if (e === null) {
        return '!';
      }
      if (e === void 0) {
        return 'undef';
      }
      if (e.ref != null) {
        return "*" + e.ref;
      }
      if (e instanceof gLong) {
        return "" + e + "L";
      }
      return e;
    });
  };

  root.VTRACE = 10;

  root.TRACE = 9;

  root.DEBUG = 5;

  root.ERROR = 1;

  if ((_ref1 = root.log_level) == null) {
    root.log_level = root.ERROR;
  }

  if (!((typeof console !== "undefined" && console !== null) || (typeof window !== "undefined" && window !== null ? window.console : void 0))) {
    window.console = {
      log: function() {},
      error: function() {
        var msgs;
        msgs = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        throw msgs.join('\n') + '\n';
      },
      profile: function() {},
      profileEnd: function() {}
    };
  }

  root.log = function() {
    var level, msgs;
    level = arguments[0], msgs = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    if (level <= root.log_level) {
      return console[level === 1 ? 'error' : 'log'].apply(console, msgs);
    }
  };

  root.vtrace = function() {
    var msgs;
    msgs = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return root.log.apply(root, [root.VTRACE].concat(__slice.call(msgs)));
  };

  root.trace = function() {
    var msgs;
    msgs = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return root.log.apply(root, [root.TRACE].concat(__slice.call(msgs)));
  };

  root.debug = function() {
    var msgs;
    msgs = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return root.log.apply(root, [root.DEBUG].concat(__slice.call(msgs)));
  };

  root.error = function() {
    var msgs;
    msgs = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return root.log.apply(root, [root.ERROR].concat(__slice.call(msgs)));
  };

}).call(this);
