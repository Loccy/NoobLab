// Generated by CoffeeScript 1.3.3
(function() {
  var Assignment, BasicBlock, BlockChain, Expr, LocalVar, Method, Primitive, StackVar, Temp, c2t, cmpMap, compile_class_handlers, compile_obj_handlers, gLong, max_number, method_epilogue, method_prologue, root, util, _,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
    __slice = [].slice,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  _ = require('../vendor/_.js');

  gLong = require('../vendor/gLong.js');

  util = require('./util');

  Method = require('./methods').Method;

  c2t = require('./types').c2t;

  "use strict";


  root = typeof exports !== "undefined" && exports !== null ? exports : this.compiler = {};

  BlockChain = (function() {

    function BlockChain(method) {
      var block, current_block, handler, i, idx, labels, p, param_name, params_size, targets, try_locations, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _ref2,
        _this = this;
      this.blocks = [];
      this.instr2block = {};
      this.temp_count = 0;
      targets = [0];
      method.code.each_opcode(function(idx, oc) {
        if (oc.offset != null) {
          return targets.push(idx + oc.byte_count + 1, idx + oc.offset);
        }
      });
      try_locations = {};
      _ref = method.code.exception_handlers;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        handler = _ref[_i];
        try_locations[handler.start_pc] = {
          name: 'try',
          byte_count: -1,
          handler: handler
        };
        targets.push(handler.start_pc, handler.handler_pc);
      }
      targets.sort(function(a, b) {
        return a - b;
      });
      labels = _.uniq(targets);
      for (i = _j = 0, _len1 = labels.length; _j < _len1; i = ++_j) {
        idx = labels[i];
        block = new BasicBlock(this, idx);
        this.blocks.push(block);
        this.instr2block[idx] = i;
        if (this.blocks.length > 1) {
          this.blocks[this.blocks.length - 2].next.push(block);
        }
      }
      current_block = -1;
      method.code.each_opcode(function(idx, oc) {
        if (__indexOf.call(labels, idx) >= 0) {
          current_block++;
        }
        block = _this.blocks[current_block];
        if (try_locations[idx] != null) {
          block.opcodes.push(try_locations[idx]);
          block.has_try = try_locations[idx].handler;
        }
        return block.opcodes.push(oc);
      });
      this.param_names = ['rs'];
      params_size = 0;
      if (!method.access_flags["static"]) {
        param_name = this.new_temp();
        this.param_names.push(param_name);
        this.blocks[0].put_cl(params_size++, param_name);
      }
      _ref1 = method.param_types;
      for (_k = 0, _len2 = _ref1.length; _k < _len2; _k++) {
        p = _ref1[_k];
        param_name = this.new_temp();
        this.param_names.push(param_name);
        if ((_ref2 = p.toString()) === 'D' || _ref2 === 'J') {
          this.blocks[0].put_cl2(params_size, param_name);
          params_size += 2;
        } else {
          this.blocks[0].put_cl(params_size++, param_name);
        }
      }
    }

    BlockChain.prototype.get_block_from_instr = function(idx) {
      return this.blocks[this.instr2block[idx]];
    };

    BlockChain.prototype.new_temp = function() {
      return new Temp(this.temp_count++);
    };

    BlockChain.prototype.get_all_temps = function() {
      var i, _i, _ref, _results;
      _results = [];
      for (i = _i = 0, _ref = this.temp_count; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        _results.push(new Temp(i));
      }
      return _results;
    };

    BlockChain.prototype.compile = function() {
      return this.blocks[0].compile();
    };

    return BlockChain;

  })();

  BasicBlock = (function() {

    function BasicBlock(block_chain, start_idx) {
      this.block_chain = block_chain;
      this.start_idx = start_idx;
      this.opcodes = [];
      this.stack = [];
      this.locals = [];
      this.next = [];
      this.prev = [];
      this.stmts = [];
      this.visited = false;
    }

    BasicBlock.prototype.push = function() {
      var values;
      values = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return this.stack.push.apply(this.stack, values);
    };

    BasicBlock.prototype.push2 = function() {
      var v, values, _i, _len, _results;
      values = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      _results = [];
      for (_i = 0, _len = values.length; _i < _len; _i++) {
        v = values[_i];
        _results.push(this.stack.push(v, null));
      }
      return _results;
    };

    BasicBlock.prototype.pop = function() {
      return this.stack.pop();
    };

    BasicBlock.prototype.pop2 = function() {
      this.stack.pop();
      return this.stack.pop();
    };

    BasicBlock.prototype.put_cl = function(idx, v) {
      return this.locals[idx] = v;
    };

    BasicBlock.prototype.put_cl2 = function(idx, v) {
      this.locals[idx] = v;
      return this.locals[idx + 1] = null;
    };

    BasicBlock.prototype.cl = function(idx) {
      return this.locals[idx];
    };

    BasicBlock.prototype.add_stmt = function(stmt) {
      return this.stmts.push(stmt);
    };

    BasicBlock.prototype.new_temp = function() {
      return this.block_chain.new_temp();
    };

    BasicBlock.prototype.entryFromVar = function(v) {
      var expr;
      if (v instanceof StackVar) {
        return expr = this.stack[v.id];
      } else {
        return expr = this.locals[v.id];
      }
    };

    BasicBlock.prototype.forEachVar = function(cb) {
      var i, l, new_l, new_s, s, _i, _j, _len, _len1, _ref, _ref1, _results;
      _ref = this.stack;
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        s = _ref[i];
        if (!(s != null)) {
          continue;
        }
        new_s = new StackVar(i);
        cb(new_s);
      }
      _ref1 = this.locals;
      _results = [];
      for (i = _j = 0, _len1 = _ref1.length; _j < _len1; i = ++_j) {
        l = _ref1[i];
        if (!(l != null)) {
          continue;
        }
        new_l = new LocalVar(i);
        _results.push(cb(new_l));
      }
      return _results;
    };

    BasicBlock.prototype.compile_epilogue = function() {
      var clobbered, postordered, replacements, rv, traverse, visited,
        _this = this;
      rv = [];
      postordered = [];
      visited = {};
      clobbered = {};
      replacements = {};
      traverse = function(v) {
        var expr, replacer;
        if (visited[v]) {
          return;
        }
        visited[v] = true;
        expr = _this.entryFromVar(v);
        if (!(expr instanceof Primitive && v.equals(expr))) {
          clobbered[v] = true;
          replacer = function(d) {
            if (!((d instanceof StackVar || d instanceof LocalVar) && !d.equals(v))) {
              return d;
            }
            if (clobbered[d]) {
              if (!replacements[d]) {
                replacements[d] = _this.new_temp();
                rv.push(new Assignment(replacements[d], d));
              }
              return replacements[d];
            }
            traverse(d);
            return d;
          };
          if (expr instanceof Expr) {
            expr.replace(replacer);
          } else {
            expr = replacer(expr);
          }
          return postordered.push(new Assignment(v, expr));
        }
      };
      this.forEachVar(traverse);
      return rv.concat(postordered.reverse());
    };

    BasicBlock.prototype.compile = function(prev_stack, prev_locals, exc_catcher) {
      var handler, i, instr_idx, l, linearize, linearized_stmts, next_block, op, s, _i, _j, _len, _len1, _ref, _ref1, _ref2,
        _this = this;
      if (exc_catcher == null) {
        exc_catcher = false;
      }
      if (this.visited) {
        return;
      }
      this.visited = true;
      if (this.start_idx !== 0) {
        if (!exc_catcher) {
          this.stack = (function() {
            var _i, _len, _results;
            _results = [];
            for (i = _i = 0, _len = prev_stack.length; _i < _len; i = ++_i) {
              s = prev_stack[i];
              if (s != null) {
                _results.push(new StackVar(i));
              } else {
                _results.push(null);
              }
            }
            return _results;
          })();
        }
        this.locals = (function() {
          var _i, _len, _results;
          _results = [];
          for (i = _i = 0, _len = prev_locals.length; _i < _len; i = ++_i) {
            l = prev_locals[i];
            if (l != null) {
              _results.push(new LocalVar(i));
            } else {
              _results.push(null);
            }
          }
          return _results;
        })();
      }
      instr_idx = this.start_idx;
      _ref = this.opcodes;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        op = _ref[_i];
        if ((handler = (_ref1 = compile_obj_handlers[op.name]) != null ? _ref1.compile : void 0) != null) {
          handler.call(op, this, instr_idx);
        } else if ((handler = util.lookup_handler(compile_class_handlers, op)) != null) {
          handler.apply(op, [this, instr_idx]);
        } else {
          console.error("XXX missing " + op.constructor.name + ": " + op.name);
        }
        instr_idx += op.byte_count + 1;
      }
      if (!((op.offset != null) || (op.name.indexOf('return')) !== -1)) {
        this.add_stmt(function() {
          return _this.compile_epilogue();
        });
      }
      if ((handler = this.has_try) != null) {
        next_block = this.block_chain.get_block_from_instr(handler.handler_pc);
        this.add_stmt("} catch (e) {\n  if (!(e instanceof exceptions.JavaException)) throw e");
        if (handler.catch_type === "<any>") {
          this.add_stmt("rs.push(e.exception); label = " + handler.handler_pc + "; continue\n}");
        } else {
          this.add_stmt("if (types.is_castable(rs, e.exception.type, types.c2t(" + (JSON.stringify(handler.catch_type)) + "))) {\n  rs.push(e.exception); label = " + handler.handler_pc + "; continue;\n} else {\n  throw e;\n}\n}");
        }
        next_block.stack = ["rs.pop()"];
        next_block.compile(this.stack, this.locals, true);
      }
      _ref2 = this.next;
      for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
        next_block = _ref2[_j];
        next_block.compile(this.stack, this.locals);
      }
      linearized_stmts = "";
      linearize = function(arr) {
        var _k, _len2, _results;
        _results = [];
        for (_k = 0, _len2 = arr.length; _k < _len2; _k++) {
          s = arr[_k];
          if (_.isFunction(s)) {
            _results.push(linearize(s()));
          } else {
            _results.push(linearized_stmts += s + ";\n");
          }
        }
        return _results;
      };
      linearize(this.stmts);
      return this.compiled_str = "case " + this.start_idx + ":\n// " + ((function() {
        var _k, _len2, _ref3, _results;
        _ref3 = this.opcodes;
        _results = [];
        for (_k = 0, _len2 = _ref3.length; _k < _len2; _k++) {
          op = _ref3[_k];
          _results.push(op.name);
        }
        return _results;
      }).call(this)) + "\n" + linearized_stmts;
    };

    return BasicBlock;

  })();

  Expr = (function() {

    function Expr() {
      var frag, i, str, subexps, _i, _len, _ref;
      str = arguments[0], subexps = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      this.fragments = str.split(/(\$\d+)/);
      _ref = this.fragments;
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        frag = _ref[i];
        if (/\$\d+/.test(frag)) {
          this.fragments[i] = subexps[parseInt(frag.slice(1), 10)];
        }
      }
    }

    Expr.prototype["eval"] = function(b) {
      var temp;
      temp = b.new_temp();
      b.add_stmt(new Expr("$0 = " + this, temp));
      return new Primitive(b);
    };

    Expr.prototype.toString = function() {
      return this.fragments.join('');
    };

    Expr.prototype.replace = function(cb) {
      var frag, i, _i, _len, _ref, _results;
      _ref = this.fragments;
      _results = [];
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        frag = _ref[i];
        if (frag instanceof Temp) {
          _results.push(this.fragments[i] = cb(frag));
        } else if (frag instanceof Expr) {
          _results.push(frag.replace(cb));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    Expr.prototype.get_dependencies = function() {
      var frag, temps, _i, _len, _ref;
      temps = [];
      _ref = this.fragments;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        frag = _ref[_i];
        if (frag instanceof Expr) {
          temps.concat(frag.get_dependencies());
        } else if (frag instanceof Temp) {
          temps.push(frag);
        }
      }
      return temps;
    };

    return Expr;

  })();

  Primitive = (function() {

    function Primitive(str) {
      this.str = str;
    }

    Primitive.prototype["eval"] = function() {
      return this;
    };

    Primitive.prototype.toString = function() {
      return this.str;
    };

    Primitive.prototype.equals = function(p) {
      return p.toString() === this.toString();
    };

    return Primitive;

  })();

  Temp = (function(_super) {

    __extends(Temp, _super);

    function Temp(id) {
      this.id = id;
    }

    Temp.prototype.toString = function() {
      return "$" + this.id;
    };

    return Temp;

  })(Primitive);

  StackVar = (function(_super) {

    __extends(StackVar, _super);

    function StackVar() {
      return StackVar.__super__.constructor.apply(this, arguments);
    }

    StackVar.prototype.toString = function() {
      return "s" + this.id;
    };

    return StackVar;

  })(Temp);

  LocalVar = (function(_super) {

    __extends(LocalVar, _super);

    function LocalVar() {
      return LocalVar.__super__.constructor.apply(this, arguments);
    }

    LocalVar.prototype.toString = function() {
      return "l" + this.id;
    };

    return LocalVar;

  })(Temp);

  Assignment = (function() {

    function Assignment(dest, src) {
      this.dest = dest;
      this.src = src;
    }

    Assignment.prototype.toString = function() {
      return "" + this.dest + " = " + this.src;
    };

    return Assignment;

  })();

  cmpMap = {
    eq: '==',
    ne: '!==',
    lt: '<',
    ge: '>=',
    gt: '>',
    le: '<='
  };

  max_number = gLong.fromNumber(Math.pow(2, 53));

  compile_class_handlers = {
    PushOpcode: function(b) {
      return b.push(this.value);
    },
    StoreOpcode: function(b) {
      if (this.name.match(/[ld]store/)) {
        return b.put_cl2(this.var_num, b.pop2());
      } else {
        return b.put_cl(this.var_num, b.pop());
      }
    },
    LoadOpcode: function(b) {
      if (this.name.match(/[ld]load/)) {
        return b.push2(b.cl(this.var_num));
      } else {
        return b.push(b.cl(this.var_num));
      }
    },
    LoadConstantOpcode: function(b) {
      var val;
      val = this.constant.value;
      if (this.constant.type === 'String') {
        return b.push("rs.init_string(" + (JSON.stringify(this.str_constant.value)) + ", true)");
      } else if (this.constant.type === 'class') {
        return b.push("rs.class_lookup(c2t('" + this.str_constant.value + "')), true)");
      } else if (this.name === 'ldc2_w') {
        if (val != null ? typeof val.greaterThan === "function" ? val.greaterThan(max_number) : void 0 : void 0) {
          return b.push2("gLong.fromBits(" + (val.getLowBits()) + "," + (val.getHighBits()) + ")");
        } else if ((val != null ? val.toNumber : void 0) != null) {
          return b.push2("gLong.fromNumber(" + val + ")");
        } else {
          return b.push2(val);
        }
      } else {
        return b.push(val);
      }
    },
    ArrayLoadOpcode: function(b) {
      var temp;
      temp = b.new_temp();
      b.add_stmt(new Expr("var idx = $0;\nvar obj = rs.check_null($1);\nvar array = obj.array;\nif (!(0 <= idx && idx < array.length))\n  exceptions.java_throw(rs, 'java/lang/ArrayIndexOutOfBoundsException',\n    idx + \" not in length \" + array.length + \" array of type \" + obj.type.toClassString());\n$2 = array[idx]", b.pop(), b.pop(), temp));
      if (this.name.match(/[ld]aload/)) {
        return b.push2(temp);
      } else {
        return b.push(temp);
      }
    },
    UnaryBranchOpcode: function(b, idx) {
      var cmpCode, cond;
      cmpCode = this.name.slice(2);
      cond = (function() {
        switch (cmpCode) {
          case "null":
            return "=== null";
          case "nonnull":
            return "!== null";
          default:
            return "" + cmpMap[cmpCode] + " 0";
        }
      })();
      b.next.push(b.block_chain.get_block_from_instr(this.offset + idx));
      b.add_stmt(function() {
        return b.compile_epilogue();
      });
      return b.add_stmt(new Expr("if ($0 " + cond + ") { label = " + (this.offset + idx) + "; continue }", b.pop()));
    },
    BinaryBranchOpcode: function(b, idx) {
      var cmpCode;
      cmpCode = this.name.slice(7);
      b.next.push(b.block_chain.get_block_from_instr(this.offset + idx));
      b.add_stmt(function() {
        return b.compile_epilogue();
      });
      return b.add_stmt(new Expr("if ($1 " + cmpMap[cmpCode] + " $0) { label = " + (this.offset + idx) + "; continue }", b.pop(), b.pop()));
    },
    InvokeOpcode: function(b, idx) {
      var method, params;
      method = new Method;
      method.access_flags = {
        "static": this.name === 'invokestatic'
      };
      method.parse_descriptor(this.method_spec.sig);
      params = b.stack.splice(-method.param_bytes);
      method_prologue(b, params);
      b.add_stmt("rs.method_lookup(" + (JSON.stringify(this.method_spec)) + ").run(rs)");
      return method_epilogue(b, method);
    },
    DynInvokeOpcode: function(b, idx) {
      var cls, method, params;
      method = new Method;
      method.access_flags = {};
      method.parse_descriptor(this.method_spec.sig);
      params = b.stack.splice(-method.param_bytes);
      method_prologue(b, params);
      cls = b.new_temp();
      b.add_stmt(new Assignment(cls, "rs.check_null(" + params[0] + ").type.toClassString()"));
      b.add_stmt("rs.method_lookup({'class':" + cls + ", sig:" + (JSON.stringify(this.method_spec.sig)) + "}).run(rs)");
      return method_epilogue(b, method);
    }
  };

  method_prologue = function(b, params) {
    var p;
    if (params.length === 1) {
      return b.add_stmt("rs.push(" + params[0] + ")");
    } else if (params.length === 2) {
      return b.add_stmt("rs.push2(" + params[0] + ", " + params[1] + ")");
    } else {
      return b.add_stmt("rs.push_array([" + ((function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = params.length; _i < _len; _i++) {
          p = params[_i];
          _results.push(p != null ? p : 'null');
        }
        return _results;
      })()) + "])");
    }
  };

  method_epilogue = function(b, method) {
    var temp, _ref;
    if (method.return_type.toString() !== 'V') {
      temp = b.new_temp();
      if ((_ref = method.return_type.toString()) === 'D' || _ref === 'J') {
        b.add_stmt(new Assignment(temp, "rs.pop2()"));
        return b.push2(temp);
      } else {
        b.add_stmt(new Assignment(temp, "rs.pop()"));
        return b.push(temp);
      }
    }
  };

  compile_obj_handlers = {
    'try': {
      compile: function(b) {
        return b.add_stmt("try { //");
      }
    },
    aconst_null: {
      compile: function(b) {
        return b.push(new Primitive("null"));
      }
    },
    iconst_m1: {
      compile: function(b) {
        return b.push(new Primitive("-1"));
      }
    },
    iconst_0: {
      compile: function(b) {
        return b.push(new Primitive("0"));
      }
    },
    iconst_1: {
      compile: function(b) {
        return b.push(new Primitive("1"));
      }
    },
    iconst_2: {
      compile: function(b) {
        return b.push(new Primitive("2"));
      }
    },
    iconst_3: {
      compile: function(b) {
        return b.push(new Primitive("3"));
      }
    },
    iconst_4: {
      compile: function(b) {
        return b.push(new Primitive("4"));
      }
    },
    iconst_5: {
      compile: function(b) {
        return b.push(new Primitive("5"));
      }
    },
    lconst_0: {
      compile: function(b) {
        return b.push2(new Primitive("gLong.ZERO"));
      }
    },
    lconst_1: {
      compile: function(b) {
        return b.push2(new Primitive("gLong.ONE"));
      }
    },
    fconst_0: {
      compile: function(b) {
        return b.push(new Primitive("0"));
      }
    },
    fconst_1: {
      compile: function(b) {
        return b.push(new Primitive("1"));
      }
    },
    fconst_2: {
      compile: function(b) {
        return b.push(new Primitive("2"));
      }
    },
    dconst_0: {
      compile: function(b) {
        return b.push2(new Primitive("0"));
      }
    },
    dconst_1: {
      compile: function(b) {
        return b.push2(new Primitive("1"));
      }
    },
    iastore: {
      compile: function(b) {
        return b.add_stmt(new Expr("rs.check_null($2).array[$1]=$0", b.pop(), b.pop(), b.pop()));
      }
    },
    lastore: {
      compile: function(b) {
        return b.add_stmt(new Expr("rs.check_null($2).array[$1]=$0", b.pop2(), b.pop(), b.pop()));
      }
    },
    fastore: {
      compile: function(b) {
        return b.add_stmt(new Expr("rs.check_null($2).array[$1]=$0", b.pop(), b.pop(), b.pop()));
      }
    },
    dastore: {
      compile: function(b) {
        return b.add_stmt(new Expr("rs.check_null($2).array[$1]=$0", b.pop2(), b.pop(), b.pop()));
      }
    },
    aastore: {
      compile: function(b) {
        return b.add_stmt(new Expr("rs.check_null($2).array[$1]=$0", b.pop(), b.pop(), b.pop()));
      }
    },
    bastore: {
      compile: function(b) {
        return b.add_stmt(new Expr("rs.check_null($2).array[$1]=$0", b.pop(), b.pop(), b.pop()));
      }
    },
    castore: {
      compile: function(b) {
        return b.add_stmt(new Expr("rs.check_null($2).array[$1]=$0", b.pop(), b.pop(), b.pop()));
      }
    },
    sastore: {
      compile: function(b) {
        return b.add_stmt(new Expr("rs.check_null($2).array[$1]=$0", b.pop(), b.pop(), b.pop()));
      }
    },
    pop: {
      compile: function(b) {
        return b.pop();
      }
    },
    pop2: {
      compile: function(b) {
        return b.pop2();
      }
    },
    dup: {
      compile: function(b) {
        var v;
        v = b.pop();
        return b.push(v, v);
      }
    },
    dup_x1: {
      compile: function(b) {
        var v1, v2;
        v1 = b.pop();
        v2 = b.pop();
        return b.push(v1, v2, v1);
      }
    },
    dup_x2: {
      compile: function(b) {
        var v1, v2, v3, _ref;
        _ref = [b.pop(), b.pop(), b.pop()], v1 = _ref[0], v2 = _ref[1], v3 = _ref[2];
        return b.push(v1, v3, v2, v1);
      }
    },
    dup2: {
      compile: function(b) {
        var v1, v2;
        v1 = b.pop();
        v2 = b.pop();
        return b.push(v2, v1, v2, v1);
      }
    },
    dup2_x1: {
      compile: function(b) {
        var v1, v2, v3, _ref;
        _ref = [b.pop(), b.pop(), b.pop()], v1 = _ref[0], v2 = _ref[1], v3 = _ref[2];
        return b.push(v2, v1, v3, v2, v1);
      }
    },
    dup2_x2: {
      compile: function(b) {
        var v1, v2, v3, v4, _ref;
        _ref = [b.pop(), b.pop(), b.pop(), b.pop()], v1 = _ref[0], v2 = _ref[1], v3 = _ref[2], v4 = _ref[3];
        return b.push(v2, v1, v4, v3, v2, v1);
      }
    },
    swap: {
      compile: function(b) {
        var v1, v2;
        v2 = b.pop();
        v1 = b.pop();
        return b.push(v2, v1);
      }
    },
    iadd: {
      compile: function(b) {
        return b.push(new Expr("($0+$1)|0", b.pop(), b.pop()));
      }
    },
    ladd: {
      compile: function(b) {
        return b.push2(new Expr("$0.add($1)", b.pop2(), b.pop2()));
      }
    },
    fadd: {
      compile: function(b) {
        return b.push(new Expr("util.wrap_float($0+$1)", b.pop(), b.pop()));
      }
    },
    dadd: {
      compile: function(b) {
        return b.push2(new Expr("($0+$1)", b.pop(), b.pop()));
      }
    },
    isub: {
      compile: function(b) {
        return b.push(new Expr("($1-$0)|0", b.pop(), b.pop()));
      }
    },
    lsub: {
      compile: function(b) {
        return b.push2(new Expr("$1.subtract($0)", b.pop2(), b.pop2()));
      }
    },
    fsub: {
      compile: function(b) {
        return b.push(new Expr("util.wrap_float($1-$0)", b.pop(), b.pop()));
      }
    },
    dsub: {
      compile: function(b) {
        return b.push2(new Expr("($1-$0)", b.pop2(), b.pop2()));
      }
    },
    imul: {
      compile: function(b) {
        return b.push(new Expr("gLong.fromInt($0).multiply(gLong.fromInt($1)).toInt()", b.pop(), b.pop()));
      }
    },
    lmul: {
      compile: function(b) {
        return b.push2(new Expr("$0.multiply($1)", b.pop2(), b.pop2()));
      }
    },
    fmul: {
      compile: function(b) {
        return b.push(new Expr("util.wrap_float($0*$1)", b.pop(), b.pop()));
      }
    },
    dmul: {
      compile: function(b) {
        return b.push2(new Expr("($0*$1)", b.pop2(), b.pop2()));
      }
    },
    idiv: {
      compile: function(b) {
        return b.push(new Expr("util.int_div(rs, $1, $0)", b.pop(), b.pop()));
      }
    },
    ldiv: {
      compile: function(b) {
        return b.push2(new Expr("util.long_div(rs, $1, $0)", b.pop2(), b.pop2()));
      }
    },
    fdiv: {
      compile: function(b) {
        return b.push(new Expr("util.wrap_float($1/$0)", b.pop(), b.pop()));
      }
    },
    ddiv: {
      compile: function(b) {
        return b.push2(new Expr("($1/$0)", b.pop2(), b.pop2()));
      }
    },
    irem: {
      compile: function(b) {
        return b.push(new Expr("util.int_mod(rs,$1,$0)", b.pop(), b.pop()));
      }
    },
    lrem: {
      compile: function(b) {
        return b.push2(new Expr("util.long_mod(rs,$1,$0)", b.pop2(), b.pop2()));
      }
    },
    frem: {
      compile: function(b) {
        return b.push(new Expr("($1%$0)", b.pop(), b.pop()));
      }
    },
    drem: {
      compile: function(b) {
        return b.push2(new Expr("($1%$0)", b.pop2(), b.pop2()));
      }
    },
    ineg: {
      compile: function(b) {
        return b.push(new Expr("-$0", b.pop()));
      }
    },
    lneg: {
      compile: function(b) {
        return b.push2(new Expr("$0.negate()", b.pop2()));
      }
    },
    fneg: {
      compile: function(b) {
        return b.push(new Expr("-$0", b.pop()));
      }
    },
    dneg: {
      compile: function(b) {
        return b.push2(new Expr("-$0", b.pop2()));
      }
    },
    ishl: {
      compile: function(b) {
        return b.push(new Expr("($1<<($0&0x1F))", b.pop(), b.pop()));
      }
    },
    lshl: {
      compile: function(b) {
        return b.push(new Expr("$1.shiftLeft(gLong.fromInt($0&0x3F))", b.pop(), b.pop2()));
      }
    },
    ishr: {
      compile: function(b) {
        return b.push(new Expr("($1>>($0&0x1F))", b.pop(), b.pop()));
      }
    },
    lshr: {
      compile: function(b) {
        return b.push(new Expr("$1.shiftRight(gLong.fromInt($0&0x3F))", b.pop(), b.pop2()));
      }
    },
    iushr: {
      compile: function(b) {
        return b.push(new Expr("($1>>>($0&0x1F))", b.pop(), b.pop()));
      }
    },
    lushr: {
      compile: function(b) {
        return b.push(new Expr("$1.shiftRightUnsigned(gLong.fromInt($0&0x3F))", b.pop(), b.pop2()));
      }
    },
    iand: {
      compile: function(b) {
        return b.push(new Expr("($0&$1)", b.pop(), b.pop()));
      }
    },
    land: {
      compile: function(b) {
        return b.push2(new Expr("$0.and($1)", b.pop2(), b.pop2()));
      }
    },
    ior: {
      compile: function(b) {
        return b.push(new Expr("($0|$1)", b.pop(), b.pop()));
      }
    },
    lor: {
      compile: function(b) {
        return b.push2(new Expr("$0.or($1)", b.pop2(), b.pop2()));
      }
    },
    ixor: {
      compile: function(b) {
        return b.push(new Expr("($0^$1)", b.pop(), b.pop()));
      }
    },
    lxor: {
      compile: function(b) {
        return b.push2(new Expr("$0.xor($1)", b.pop2(), b.pop2()));
      }
    },
    iinc: {
      compile: function(b) {
        return b.put_cl(this.index, new Expr("($0+$1)|0", b.cl(this.index), this["const"]));
      }
    },
    iinc_w: {
      compile: function(b) {
        return b.put_cl(this.index, new Expr("($0+$1)|0", b.cl(this.index), this["const"]));
      }
    },
    i2l: {
      compile: function(b) {
        return b.push2(new Expr("gLong.fromInt($0)", b.pop()));
      }
    },
    i2f: {
      compile: function(b) {}
    },
    i2d: {
      compile: function(b) {
        return b.push(null);
      }
    },
    l2i: {
      compile: function(b) {
        return b.push(new Expr("$0.toInt()", b.pop2()));
      }
    },
    l2f: {
      compile: function(b) {
        return b.push(new Expr("$0.toNumber()", b.pop2()));
      }
    },
    l2d: {
      compile: function(b) {
        return b.push2(new Expr("$0.toNumber()", b.pop2()));
      }
    },
    f2i: {
      compile: function(b) {
        return b.push(new Expr("util.float2int($0)", b.pop()));
      }
    },
    f2l: {
      compile: function(b) {
        return b.push2(new Expr("gLong.fromNumber($0)", b.pop()));
      }
    },
    f2d: {
      compile: function(b) {
        return b.push(null);
      }
    },
    d2i: {
      compile: function(b) {
        return b.push(new Expr("util.float2int($0)", b.pop2()));
      }
    },
    d2l: {
      compile: function(b) {
        return b.push2(new Expr("gLong.fromNumber($0)", b.pop2()));
      }
    },
    d2f: {
      compile: function(b) {
        return b.push(new Expr("util.wrap_float($0)", b.pop2()));
      }
    },
    i2b: {
      compile: function(b) {
        return b.push(new Expr("util.truncate($0, 8)", b.pop()));
      }
    },
    i2c: {
      compile: function(b) {
        return b.push(new Expr("($0 & 0xFFFF)", b.pop()));
      }
    },
    i2s: {
      compile: function(b) {
        return b.push(new Expr("util.truncate($0, 16)", b.pop()));
      }
    },
    lcmp: {
      compile: function(b) {
        return b.push(new Expr("$1.compare($0)", b.pop2(), b.pop2()));
      }
    },
    fcmpl: {
      compile: function(b) {
        return b.push(new Expr("((r = util.cmp($1,$0)) != null ? r : -1)", b.pop(), b.pop()));
      }
    },
    fcmpg: {
      compile: function(b) {
        return b.push(new Expr("((r = util.cmp($1,$0)) != null ? r : 1)", b.pop(), b.pop()));
      }
    },
    dcmpl: {
      compile: function(b) {
        return b.push(new Expr("((r = util.cmp($1,$0)) != null ? r : -1)", b.pop2(), b.pop2()));
      }
    },
    dcmpg: {
      compile: function(b) {
        return b.push(new Expr("((r = util.cmp($1,$0)) != null ? r : 1)", b.pop2(), b.pop2()));
      }
    },
    ireturn: {
      compile: function(b) {
        return b.add_stmt("return " + (b.pop()));
      }
    },
    lreturn: {
      compile: function(b) {
        return b.add_stmt("return " + (b.pop2()));
      }
    },
    freturn: {
      compile: function(b) {
        return b.add_stmt("return " + (b.pop()));
      }
    },
    dreturn: {
      compile: function(b) {
        return b.add_stmt("return " + (b.pop2()));
      }
    },
    areturn: {
      compile: function(b) {
        return b.add_stmt("return " + (b.pop()));
      }
    },
    'return': {
      compile: function(b) {
        return b.add_stmt("return");
      }
    },
    getstatic: {
      compile: function(b) {
        var t, _ref;
        t = b.new_temp();
        b.add_stmt(new Assignment(t, "rs.static_get(" + (JSON.stringify(this.field_spec)) + ")"));
        if ((_ref = this.field_spec.type) === 'J' || _ref === 'D') {
          return b.push2(t);
        } else {
          return b.push(t);
        }
      }
    },
    putstatic: {
      compile: function(b) {
        var val, _ref;
        val = (_ref = this.field_spec.type) === 'J' || _ref === 'D' ? b.pop2() : b.pop();
        return b.add_stmt(new Expr("var f = rs.field_lookup(" + (JSON.stringify(this.field_spec)) + ");\nrs.class_lookup(f.class_type, true).set_static(f.name, $0)", val));
      }
    },
    getfield: {
      compile: function(b) {
        var for_class, name, t, type, _ref;
        t = b.new_temp();
        name = JSON.stringify(this.field_spec.name);
        type = JSON.stringify(this.field_spec.type);
        for_class = JSON.stringify(this.field_spec["class"]);
        b.add_stmt(new Expr("$1 = $0.get_field(rs, " + name + ", " + for_class + ")", b.pop(), t));
        if ((_ref = this.field_spec.type) === 'J' || _ref === 'D') {
          return b.push2(t);
        } else {
          return b.push(t);
        }
      }
    },
    putfield: {
      compile: function(b) {
        var for_class, name, type, val, _ref;
        val = (_ref = this.field_spec.type) === 'J' || _ref === 'D' ? b.pop2() : b.pop();
        name = JSON.stringify(this.field_spec.name);
        type = JSON.stringify(this.field_spec.type);
        for_class = JSON.stringify(this.field_spec["class"]);
        return b.add_stmt(new Expr("$0.set_field(rs, " + name + ", " + val + ", " + for_class + ")", b.pop(), val));
      }
    },
    'new': {
      compile: function(b) {
        var t;
        t = b.new_temp();
        b.add_stmt(new Assignment(t, "rs.init_object(" + (JSON.stringify(this["class"])) + ")"));
        return b.push(t);
      }
    },
    newarray: {
      compile: function(b) {
        var t;
        t = b.new_temp();
        b.add_stmt(new Assignment(t, new Expr("rs.heap_newarray('" + this.element_type + "', $0)", b.pop())));
        return b.push(t);
      }
    },
    anewarray: {
      compile: function(b) {
        var t;
        t = b.new_temp();
        b.add_stmt(new Assignment(t, new Expr("rs.heap_newarray('L" + this["class"] + ";', $0)", b.pop())));
        return b.push(t);
      }
    },
    arraylength: {
      compile: function(b) {
        var t;
        t = b.new_temp();
        b.add_stmt(new Assignment(t, new Expr("rs.check_null($0).array.length", b.pop())));
        return b.push(t);
      }
    },
    athrow: {
      compile: function(b) {
        return b.add_stmt(new Expr("throw new exceptions.JavaException($0)", b.pop()));
      }
    },
    checkcast: {
      compile: function(b) {
        var obj, target_class;
        target_class = c2t(this["class"]).toExternalString();
        obj = b.pop();
        b.add_stmt(new Expr("if (($0 != null) && !types.check_cast(rs, $0, " + (JSON.stringify(this["class"])) + ")) {\n  exceptions.java_throw(rs, 'java/lang/ClassCastException', $0.type.toExternalString()+\" cannot be cast to " + target_class + "\");\n}", obj));
        return b.push(obj);
      }
    },
    'instanceof': {
      compile: function(b) {
        var t;
        t = b.new_temp();
        b.add_stmt(new Assignment(t, new Expr("($0 == null)? 0 : types.check_cast(rs,$0," + (JSON.stringify(this["class"])) + ")+0", b.pop())));
        return b.push(t);
      }
    },
    multianewarray: {
      compile: function(b) {
        var counts, def, t;
        t = b.new_temp();
        counts = b.stack.splice(-this.dim, this.dim);
        def = util.initial_value(this["class"].slice(this.dim));
        b.add_stmt(new Expr("var counts = [" + counts + "];\nfunction init_arr(curr_dim) {\n  if (curr_dim === " + this.dim + ") return " + def + ";\n  var dimension = [];\n  for (var _i = 0; _i < counts[curr_dim]; _i++)\n    dimension.push(init_arr(curr_dim + 1));\n  return rs.init_object(" + (JSON.stringify(this["class"])) + ".slice(curr_dim), dimension);\n}\n$0 = init_arr(0)", t));
        return b.push(t);
      }
    },
    goto: {
      compile: function(b, idx) {
        b.next = [b.block_chain.get_block_from_instr(this.offset + idx)];
        b.add_stmt(function() {
          return b.compile_epilogue();
        });
        return b.add_stmt("label = " + (this.offset + idx) + "; continue");
      }
    },
    goto_w: {
      compile: function(b, idx) {
        b.next = [b.block_chain.get_block_from_instr(this.offset + idx)];
        b.add_stmt(function() {
          return b.compile_epilogue();
        });
        return b.add_stmt("label = " + (this.offset + idx) + "; continue");
      }
    }
  };

  root.compile = function(class_file) {
    var b, block_chain, class_name, i, m, methods, sig, temps;
    class_name = class_file.this_class.toClassString();
    methods = (function() {
      var _ref, _results;
      _ref = class_file.methods;
      _results = [];
      for (sig in _ref) {
        m = _ref[sig];
        if (!(m.access_flags["native"] || m.access_flags.abstract)) {
          block_chain = new BlockChain(m);
          block_chain.compile();
          temps = block_chain.get_all_temps();
          _results.push("      \"" + m.name + m.raw_descriptor + "\": (function() {\n        var m = new Method();\n        m.class_type = c2t(\"" + (m.class_type.toClassString()) + "\");\n        m.access_flags = " + (m.access_flags["native"] = 1, JSON.stringify(m.access_flags)) + ";\n        m.parse_descriptor(\"" + m.raw_descriptor + "\");\n        m.code = function(" + (block_chain.param_names.join(", ")) + ") {\n          var label = 0;\n          " + (temps.length > 0 ? "var " + (temps.join(", ")) + ";" : "") + "\n          " + (m.code.max_locals > 0 ? "var " + (((function() {
            var _i, _ref1, _results1;
            _results1 = [];
            for (i = _i = 0, _ref1 = m.code.max_locals; 0 <= _ref1 ? _i < _ref1 : _i > _ref1; i = 0 <= _ref1 ? ++_i : --_i) {
              _results1.push("l" + i);
            }
            return _results1;
          })()).join(", ")) + ";" : "") + "\n          " + (m.code.max_stack > 0 ? "var " + (((function() {
            var _i, _ref1, _results1;
            _results1 = [];
            for (i = _i = 0, _ref1 = m.code.max_stack; 0 <= _ref1 ? _i < _ref1 : _i > _ref1; i = 0 <= _ref1 ? ++_i : --_i) {
              _results1.push("s" + i);
            }
            return _results1;
          })()).join(", ")) + ";" : "") + "\n          while (true) {\n            switch (label) {\n" + (((function() {
            var _i, _len, _ref1, _results1;
            _ref1 = block_chain.blocks;
            _results1 = [];
            for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
              b = _ref1[_i];
              _results1.push(b.compiled_str);
            }
            return _results1;
          })()).join("")) + "\n            };\n          }\n        };\n        return m;\n      })(),");
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    })();
    return "c2t = require('./src/types').c2t;\nMethod = require('./src/methods').Method;\nexceptions = require('./src/exceptions');\nmodule.exports = {\n  this_class: c2t(\"" + (class_file.this_class.toClassString()) + "\"),\n  interfaces: [],\n  fields: [],\n  methods: {\n    " + (methods.join("\n")) + "\n  }\n};";
  };

}).call(this);
