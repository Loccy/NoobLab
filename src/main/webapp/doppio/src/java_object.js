// Generated by CoffeeScript 1.3.3
(function() {
  var debug, error, java_throw, log, root, types, util, vtrace, _, _ref, _ref1,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  _ = require('../vendor/_.js');

  util = require('./util');

  types = require('./types');

  vtrace = require('./logging').vtrace;

  java_throw = require('./exceptions').java_throw;

  _ref = require('./logging'), log = _ref.log, debug = _ref.debug, error = _ref.error;

  "use strict";


  root = typeof exports !== "undefined" && exports !== null ? exports : (_ref1 = window.java_object) != null ? _ref1 : window.java_object = {};

  root.JavaArray = (function() {

    function JavaArray(rs, type, obj) {
      this.type = type;
      this.ref = rs.high_oref++;
      this.array = obj;
    }

    JavaArray.prototype.clone = function(rs) {
      return new root.JavaArray(rs, this.type, _.clone(this.array));
    };

    JavaArray.prototype.get_field_from_offset = function(rs, offset) {
      return this.array[offset.toInt()];
    };

    JavaArray.prototype.set_field_from_offset = function(rs, offset, value) {
      return this.array[offset.toInt()] = value;
    };

    JavaArray.prototype.toString = function() {
      if (this.array.length <= 10) {
        return "<" + this.type + " [" + this.array + "] (*" + this.ref + ")>";
      } else {
        return "<" + this.type + " of length " + this.array.length + " (*" + this.ref + ")>";
      }
    };

    return JavaArray;

  })();

  root.JavaObject = (function() {

    function JavaObject(rs, type, cls, obj) {
      var field;
      this.type = type;
      this.cls = cls;
      if (obj == null) {
        obj = {};
      }
      this.ref = rs.high_oref++;
      this.fields = Object.create(this.cls.get_default_fields(rs));
      for (field in obj) {
        if (obj.hasOwnProperty(field)) {
          this.fields[field] = obj[field];
        }
      }
      return;
    }

    JavaObject.prototype.clone = function(rs) {
      return new root.JavaObject(rs, this.type, this.cls, _.clone(this.fields));
    };

    JavaObject.prototype.set_field = function(rs, name, val) {
      if (this.fields[name] !== void 0) {
        this.fields[name] = val;
      } else {
        java_throw(rs, 'java/lang/NoSuchFieldError', name);
      }
    };

    JavaObject.prototype.get_field = function(rs, name) {
      if (this.fields[name] !== void 0) {
        return this.fields[name];
      }
      return java_throw(rs, 'java/lang/NoSuchFieldError', name);
    };

    JavaObject.prototype.get_field_from_offset = function(rs, offset) {
      var f;
      f = this._get_field_from_offset(rs, this.cls, offset.toInt());
      if (f.field.access_flags["static"]) {
        return rs.static_get({
          "class": this.type.toClassString(),
          name: f.field.name
        });
      }
      return this.get_field(rs, f.cls + '/' + f.field.name);
    };

    JavaObject.prototype._get_field_from_offset = function(rs, cls, offset) {
      var classname;
      classname = cls.this_class.toClassString();
      while (cls.fields[offset] == null) {
        if (cls.super_class == null) {
          java_throw(rs, 'java/lang/NullPointerException', "field " + offset + " doesn't exist in class " + classname);
        }
        cls = rs.class_lookup(cls.super_class);
      }
      return {
        field: cls.fields[offset],
        cls: cls.this_class.toClassString()
      };
    };

    JavaObject.prototype.set_field_from_offset = function(rs, offset, value) {
      var f;
      f = this._get_field_from_offset(rs, this.cls, offset.toInt());
      if (f.field.access_flags["static"]) {
        rs.push(value);
        return rs.static_put({
          "class": this.type.toClassString(),
          name: f.field.name
        });
      } else {
        return this.set_field(rs, f.cls + '/' + f.field.name, value);
      }
    };

    JavaObject.prototype.toString = function() {
      if (this.type.toClassString() === 'java/lang/String') {
        return "<" + this.type + " '" + (this.jvm2js_str()) + "' (*" + this.ref + ")>";
      } else {
        return "<" + this.type + " (*" + this.ref + ")>";
      }
    };

    JavaObject.prototype.jvm2js_str = function() {
      return util.chars2js_str(this.fields['java/lang/String/value'], this.fields['java/lang/String/offset'], this.fields['java/lang/String/count']);
    };

    return JavaObject;

  })();

  root.JavaClassObject = (function(_super) {

    __extends(JavaClassObject, _super);

    function JavaClassObject(rs, $type, file) {
      var type;
      this.$type = $type;
      this.file = file;
      type = types.c2t('java/lang/Class');
      JavaClassObject.__super__.constructor.call(this, rs, type, rs.class_lookup(type));
    }

    JavaClassObject.prototype.toString = function() {
      return "<Class " + this.$type + " (*" + this.ref + ")>";
    };

    return JavaClassObject;

  })(root.JavaObject);

  root.thread_name = function(rs, thread) {
    return util.chars2js_str(thread.get_field(rs, 'java/lang/Thread/name'));
  };

}).call(this);
