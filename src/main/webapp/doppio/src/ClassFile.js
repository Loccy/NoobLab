// Generated by CoffeeScript 1.3.3
(function() {
  var ClassFile, ConstantPool, attributes, c2t, methods, opcodes, types, util;

  util = require('./util');

  ConstantPool = require('./ConstantPool');

  attributes = require('./attributes');

  opcodes = require('./opcodes');

  methods = require('./methods');

  types = require('./types');

  c2t = types.c2t;

  "use strict";


  ClassFile = (function() {

    function ClassFile(bytes_array) {
      var f, i, isize, m, mkey, num_fields, num_methods, super_ref, _i, _j, _len, _ref, _ref1;
      bytes_array = new util.BytesArray(bytes_array);
      if ((bytes_array.get_uint(4)) !== 0xCAFEBABE) {
        throw "Magic number invalid";
      }
      this.minor_version = bytes_array.get_uint(2);
      this.major_version = bytes_array.get_uint(2);
      if (!((45 <= (_ref = this.major_version) && _ref <= 51))) {
        throw "Major version invalid";
      }
      this.constant_pool = new ConstantPool;
      this.constant_pool.parse(bytes_array);
      this.access_byte = bytes_array.get_uint(2);
      this.access_flags = util.parse_flags(this.access_byte);
      this.this_class = c2t(this.constant_pool.get(bytes_array.get_uint(2)).deref());
      this.constant_pool.cls = this.this_class.class_name;
      super_ref = bytes_array.get_uint(2);
      if (super_ref !== 0) {
        this.super_class = c2t(this.constant_pool.get(super_ref).deref());
      }
      isize = bytes_array.get_uint(2);
      this.interfaces = (function() {
        var _i, _results;
        _results = [];
        for (i = _i = 0; _i < isize; i = _i += 1) {
          _results.push(bytes_array.get_uint(2));
        }
        return _results;
      })();
      num_fields = bytes_array.get_uint(2);
      this.fields = (function() {
        var _i, _results;
        _results = [];
        for (i = _i = 0; _i < num_fields; i = _i += 1) {
          _results.push(new methods.Field(this.this_class));
        }
        return _results;
      }).call(this);
      this.fl_cache = {};
      _ref1 = this.fields;
      for (i = _i = 0, _len = _ref1.length; _i < _len; i = ++_i) {
        f = _ref1[i];
        f.parse(bytes_array, this.constant_pool, i);
        this.fl_cache[f.name] = f;
      }
      num_methods = bytes_array.get_uint(2);
      this.methods = {};
      this.ml_cache = {};
      for (i = _j = 0; _j < num_methods; i = _j += 1) {
        m = new methods.Method(this.this_class);
        m.parse(bytes_array, this.constant_pool, i);
        mkey = m.name + m.raw_descriptor;
        this.methods[mkey] = m;
        this.ml_cache[mkey] = m;
      }
      this.attrs = attributes.make_attributes(bytes_array, this.constant_pool);
      if (bytes_array.has_bytes()) {
        throw "Leftover bytes in classfile: " + bytes_array;
      }
    }

    ClassFile.for_array_type = function(type) {
      var class_file;
      class_file = Object.create(ClassFile.prototype);
      class_file.constant_pool = new ConstantPool;
      class_file.ml_cache = {};
      class_file.fl_cache = {};
      class_file.access_flags = {};
      class_file.this_class = type;
      class_file.super_class = c2t('java/lang/Object');
      class_file.interfaces = [];
      class_file.fields = [];
      class_file.methods = {};
      class_file.attrs = [];
      return class_file;
    };

    ClassFile.prototype.field_lookup = function(rs, field_spec) {
      if (this.fl_cache[field_spec.name] == null) {
        this.fl_cache[field_spec.name] = this._field_lookup(rs, field_spec);
      }
      return this.fl_cache[field_spec.name];
    };

    ClassFile.prototype._field_lookup = function(rs, field_spec) {
      var field, i, ifc_cls, sc, _i, _j, _len, _len1, _ref, _ref1;
      _ref = this.fields;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        field = _ref[_i];
        if (field.name === field_spec.name) {
          return field;
        }
      }
      _ref1 = this.interfaces;
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        i = _ref1[_j];
        ifc_cls = rs.class_lookup(c2t(this.constant_pool.get(i).deref()));
        field = ifc_cls.field_lookup(rs, field_spec);
        if (field != null) {
          return field;
        }
      }
      if (this.super_class != null) {
        sc = rs.class_lookup(this.super_class);
        field = sc.field_lookup(rs, field_spec);
        if (field != null) {
          return field;
        }
      }
      return null;
    };

    ClassFile.prototype.method_lookup = function(rs, method_spec) {
      if (this.ml_cache[method_spec.sig] == null) {
        this.ml_cache[method_spec.sig] = this._method_lookup(rs, method_spec);
      }
      return this.ml_cache[method_spec.sig];
    };

    ClassFile.prototype._method_lookup = function(rs, method_spec) {
      var i, ifc, method, parent, _i, _len, _ref;
      method = this.methods[method_spec.sig];
      if (method != null) {
        return method;
      }
      if (this.super_class != null) {
        parent = rs.class_lookup(this.super_class);
        method = parent.method_lookup(rs, method_spec);
        if (method != null) {
          return method;
        }
      }
      _ref = this.interfaces;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        i = _ref[_i];
        ifc = rs.class_lookup(c2t(this.constant_pool.get(i).deref()));
        method = ifc.method_lookup(rs, method_spec);
        if (method != null) {
          return method;
        }
      }
      return null;
    };

    ClassFile.prototype.construct_default_fields = function(rs) {
      var cls, f, t, val, _i, _len, _ref, _results;
      t = this.this_class;
      this.default_fields = Object.create(null);
      _results = [];
      while (t != null) {
        cls = rs.class_lookup(t);
        _ref = cls.fields;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          f = _ref[_i];
          if (!(!f.access_flags["static"])) {
            continue;
          }
          val = util.initial_value(f.raw_descriptor);
          this.default_fields[t.toClassString() + '/' + f.name] = val;
        }
        _results.push(t = cls.super_class);
      }
      return _results;
    };

    ClassFile.prototype.get_default_fields = function(rs) {
      if (this.default_fields !== void 0) {
        return this.default_fields;
      }
      this.construct_default_fields(rs);
      return this.default_fields;
    };

    return ClassFile;

  })();

  if (typeof module !== "undefined" && module !== null) {
    module.exports = ClassFile;
  } else {
    window.ClassFile = ClassFile;
  }

}).call(this);
