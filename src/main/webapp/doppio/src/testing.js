// Generated by CoffeeScript 1.3.3
(function() {
  var ClassFile, RuntimeState, cleandiff, disassemble, fs, jvm, path, root, run_disasm_test, run_stdout_test, sanitize, util, _ref, _ref1, _ref2;

  jvm = require('./jvm');

  RuntimeState = require('./runtime').RuntimeState;

  util = require('./util');

  disassemble = require('./disassembler').disassemble;

  ClassFile = require('./ClassFile');

  fs = (_ref = typeof node !== "undefined" && node !== null ? node.fs : void 0) != null ? _ref : require('fs');

  path = (_ref1 = typeof node !== "undefined" && node !== null ? node.path : void 0) != null ? _ref1 : require('path');

  "use strict";


  root = typeof exports !== "undefined" && exports !== null ? exports : (_ref2 = window.testing) != null ? _ref2 : window.testing = {};

  root.find_test_classes = function(doppio_dir) {
    var file, test_dir, _i, _len, _ref3, _results;
    test_dir = path.resolve(doppio_dir, 'classes/test');
    _ref3 = fs.readdirSync(test_dir);
    _results = [];
    for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
      file = _ref3[_i];
      if (path.extname(file) === '.java') {
        _results.push("classes/test/" + (path.basename(file, '.java')));
      }
    }
    return _results;
  };

  root.run_tests = function(test_classes, stdout, hide_diffs, quiet, keep_going, callback) {
    var doppio_dir, jcl_dir, tc, _runner;
    doppio_dir = typeof node !== "undefined" && node !== null ? '/home/doppio/' : path.resolve(__dirname, '..');
    if ((test_classes != null ? test_classes.length : void 0) > 0) {
      test_classes = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = test_classes.length; _i < _len; _i++) {
          tc = test_classes[_i];
          _results.push(tc.replace(/\.class$/, ''));
        }
        return _results;
      })();
    } else {
      test_classes = root.find_test_classes(doppio_dir);
    }
    jcl_dir = path.resolve(doppio_dir, 'vendor/classes');
    jvm.classpath = [doppio_dir, jcl_dir];
    _runner = function() {
      var disasm_diff, test;
      if (test_classes.length === 0) {
        quiet || keep_going || stdout("Pass\n");
        return callback(false);
      }
      test = test_classes.shift();
      quiet || stdout("testing " + test + "...\n");
      if ((disasm_diff = run_disasm_test(doppio_dir, test)) != null) {
        stdout("Failed disasm test " + test + "\n");
        hide_diffs || stdout("" + disasm_diff + "\n");
        if (!keep_going) {
          return callback(true);
        }
      }
      return run_stdout_test(doppio_dir, test, function(diff) {
        if (diff != null) {
          stdout("Failed output test " + test + "\n");
          hide_diffs || stdout("" + diff + "\n");
          if (!keep_going) {
            return callback(true);
          }
        }
        return _runner();
      });
    };
    return _runner();
  };

  sanitize = function(str) {
    return str.replace(/\/\/.*/g, '').replace(/^\s*$[\n\r]+/mg, '').replace(/(float|double)\t.*/g, '$1').replace(/[ \t\r]+/g, ' ').replace(/[ ]\n/g, '\n').replace(/\[ \]/g, '[]');
  };

  run_disasm_test = function(doppio_dir, test_class) {
    var bytes_array, doppio_disasm, javap_disasm, test_path;
    test_path = path.resolve(doppio_dir, test_class);
    javap_disasm = sanitize(fs.readFileSync("" + test_path + ".disasm", 'utf8'));
    bytes_array = util.bytestr_to_array(fs.readFileSync("" + test_path + ".class", 'binary'));
    doppio_disasm = sanitize(disassemble(new ClassFile(bytes_array)));
    return cleandiff(doppio_disasm, javap_disasm);
  };

  run_stdout_test = function(doppio_dir, test_class, callback) {
    var doppio_output, java_output, rs, stdout;
    java_output = fs.readFileSync("" + (path.resolve(doppio_dir, test_class)) + ".runout", 'utf8');
    doppio_output = '';
    stdout = function(str) {
      return doppio_output += str;
    };
    rs = new RuntimeState(stdout, (function() {}), jvm.read_classfile);
    return jvm.run_class(rs, test_class, [], function() {
      return callback(cleandiff(doppio_output, java_output));
    });
  };

  cleandiff = function(our_str, their_str) {
    var diff, extra, oidx, our_lines, their_lines, tidx, _i, _j, _len, _len1, _ref3, _ref4, _ref5;
    our_lines = our_str.split(/\n/);
    their_lines = their_str.split(/\n/);
    _ref3 = [0, 0], oidx = _ref3[0], tidx = _ref3[1];
    diff = [];
    while (oidx < our_lines.length && tidx < their_lines.length) {
      if (our_lines[oidx++] === their_lines[tidx++]) {
        continue;
      }
      diff.push("D:" + our_lines[oidx - 1] + "\nJ:" + their_lines[tidx - 1]);
    }
    _ref4 = our_lines.slice(oidx);
    for (_i = 0, _len = _ref4.length; _i < _len; _i++) {
      extra = _ref4[_i];
      diff.push("D:" + extra);
    }
    _ref5 = their_lines.slice(tidx);
    for (_j = 0, _len1 = _ref5.length; _j < _len1; _j++) {
      extra = _ref5[_j];
      diff.push("J:" + extra);
    }
    if (diff.length > 0) {
      return diff.join('\n');
    }
  };

}).call(this);
