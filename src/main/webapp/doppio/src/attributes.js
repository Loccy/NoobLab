// Generated by CoffeeScript 1.3.3
(function() {
  var AnnotationDefault, Code, ConstantValue, Deprecated, EnclosingMethod, ExceptionHandler, Exceptions, InnerClasses, LineNumberTable, LocalVariableTable, RuntimeVisibleAnnotations, Signature, SourceFile, StackMapTable, Synthetic, opcodes, root, util, _ref;

  util = require('./util');

  opcodes = require('./opcodes');

  "use strict";


  root = typeof exports !== "undefined" && exports !== null ? exports : (_ref = window.attributes) != null ? _ref : window.attributes = {};

  ExceptionHandler = (function() {

    function ExceptionHandler() {}

    ExceptionHandler.prototype.name = 'ExceptionHandler';

    ExceptionHandler.prototype.parse = function(bytes_array, constant_pool) {
      var cti;
      this.start_pc = bytes_array.get_uint(2);
      this.end_pc = bytes_array.get_uint(2);
      this.handler_pc = bytes_array.get_uint(2);
      cti = bytes_array.get_uint(2);
      return this.catch_type = cti === 0 ? "<any>" : constant_pool.get(cti).deref();
    };

    return ExceptionHandler;

  })();

  Code = (function() {

    function Code() {}

    Code.prototype.name = 'Code';

    Code.prototype.parse = function(bytes_array, constant_pool) {
      var eh, except_len, _i, _len, _ref1;
      this.constant_pool = constant_pool;
      this.max_stack = bytes_array.get_uint(2);
      this.max_locals = bytes_array.get_uint(2);
      this.code_len = bytes_array.get_uint(4);
      if (this.code_len === 0) {
        (typeof RELEASE !== "undefined" && RELEASE !== null) || (function() {
          throw "Code.parse error: Code length is zero";
        })();
      }
      this._code_array = bytes_array.splice(this.code_len);
      this.opcodes = null;
      except_len = bytes_array.get_uint(2);
      this.exception_handlers = (function() {
        var _i, _results;
        _results = [];
        for (_i = 0; 0 <= except_len ? _i < except_len : _i > except_len; 0 <= except_len ? _i++ : _i--) {
          _results.push(new ExceptionHandler);
        }
        return _results;
      })();
      _ref1 = this.exception_handlers;
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        eh = _ref1[_i];
        eh.parse(bytes_array, constant_pool);
      }
      this.attrs = root.make_attributes(bytes_array, constant_pool);
      return this.run_stamp = 0;
    };

    Code.prototype.parse_code = function() {
      var c, op, op_index, wide;
      this.opcodes = new Array(this.code_len);
      while (this._code_array.has_bytes()) {
        op_index = this._code_array.pos();
        c = this._code_array.get_uint(1);
        wide = c === 196;
        if (wide) {
          c = this._code_array.get_uint(1);
        }
        if (opcodes.opcodes[c] == null) {
          (typeof RELEASE !== "undefined" && RELEASE !== null) || (function() {
            throw "unknown opcode code: " + c;
          })();
        }
        op = Object.create(opcodes.opcodes[c]);
        op.take_args(this._code_array, this.constant_pool, wide);
        this.opcodes[op_index] = op;
      }
      this._code_array.rewind();
    };

    Code.prototype.each_opcode = function(fn) {
      var i, _i, _ref1, _results;
      _results = [];
      for (i = _i = 0, _ref1 = this.code_len; 0 <= _ref1 ? _i <= _ref1 : _i >= _ref1; i = 0 <= _ref1 ? ++_i : --_i) {
        if (i in this.opcodes) {
          _results.push(fn(i, this.opcodes[i]));
        }
      }
      return _results;
    };

    return Code;

  })();

  LineNumberTable = (function() {

    function LineNumberTable() {}

    LineNumberTable.prototype.name = 'LineNumberTable';

    LineNumberTable.prototype.parse = function(bytes_array, constant_pool) {
      var i, ln, lnt_len, spc, _i, _results;
      this.entries = [];
      lnt_len = bytes_array.get_uint(2);
      _results = [];
      for (i = _i = 0; _i < lnt_len; i = _i += 1) {
        spc = bytes_array.get_uint(2);
        ln = bytes_array.get_uint(2);
        _results.push(this.entries.push({
          'start_pc': spc,
          'line_number': ln
        }));
      }
      return _results;
    };

    LineNumberTable.prototype.disassemblyOutput = function() {
      var entry, rv, _i, _len, _ref1;
      rv = "  LineNumberTable:\n";
      _ref1 = this.entries;
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        entry = _ref1[_i];
        rv += "   line " + entry.line_number + ": " + entry.start_pc + "\n";
      }
      return rv;
    };

    return LineNumberTable;

  })();

  SourceFile = (function() {

    function SourceFile() {}

    SourceFile.prototype.name = 'SourceFile';

    SourceFile.prototype.parse = function(bytes_array, constant_pool) {
      return this.filename = constant_pool.get(bytes_array.get_uint(2)).value;
    };

    return SourceFile;

  })();

  StackMapTable = (function() {
    var parse_entries, parse_verification_type_info;

    function StackMapTable() {}

    StackMapTable.prototype.name = 'StackMapTable';

    StackMapTable.prototype.parse = function(bytes_array, constant_pool) {
      var i;
      this.num_entries = bytes_array.get_uint(2);
      return this.entries = (function() {
        var _i, _ref1, _results;
        _results = [];
        for (i = _i = 0, _ref1 = this.num_entries; _i < _ref1; i = _i += 1) {
          _results.push(parse_entries(bytes_array, constant_pool));
        }
        return _results;
      }).call(this);
    };

    parse_entries = function(bytes_array, constant_pool) {
      var frame_type, i, num_locals, num_stack_items;
      frame_type = bytes_array.get_uint(1);
      if ((0 <= frame_type && frame_type < 64)) {
        return {
          frame_type: frame_type,
          frame_name: 'same'
        };
      } else if ((64 <= frame_type && frame_type < 128)) {
        return {
          frame_type: frame_type,
          frame_name: 'same_locals_1_stack_item',
          stack: [parse_verification_type_info(bytes_array, constant_pool)]
        };
      } else if ((128 <= frame_type && frame_type < 247)) {

      } else if (frame_type === 247) {
        return {
          frame_type: frame_type,
          frame_name: 'same_locals_1_stack_item_extended',
          offset_delta: bytes_array.get_uint(2),
          stack: [parse_verification_type_info(bytes_array, constant_pool)]
        };
      } else if ((248 <= frame_type && frame_type < 251)) {
        return {
          frame_type: frame_type,
          frame_name: 'chop',
          offset_delta: [bytes_array.get_uint(2)]
        };
      } else if (frame_type === 251) {
        return {
          frame_type: frame_type,
          frame_name: 'same_frame_extended',
          offset_delta: [bytes_array.get_uint(2)]
        };
      } else if ((252 <= frame_type && frame_type < 255)) {
        return {
          frame_type: frame_type,
          frame_name: 'append',
          offset_delta: bytes_array.get_uint(2),
          locals: (function() {
            var _i, _ref1, _results;
            _results = [];
            for (i = _i = 0, _ref1 = frame_type - 251; _i < _ref1; i = _i += 1) {
              _results.push(parse_verification_type_info(bytes_array, constant_pool));
            }
            return _results;
          })()
        };
      } else if (frame_type === 255) {
        return {
          frame_type: frame_type,
          frame_name: 'full_frame',
          offset_delta: bytes_array.get_uint(2),
          num_locals: num_locals = bytes_array.get_uint(2),
          locals: (function() {
            var _i, _results;
            _results = [];
            for (i = _i = 0; _i < num_locals; i = _i += 1) {
              _results.push(parse_verification_type_info(bytes_array, constant_pool));
            }
            return _results;
          })(),
          num_stack_items: num_stack_items = bytes_array.get_uint(2),
          stack: (function() {
            var _i, _results;
            _results = [];
            for (i = _i = 0; _i < num_stack_items; i = _i += 1) {
              _results.push(parse_verification_type_info(bytes_array, constant_pool));
            }
            return _results;
          })()
        };
      }
    };

    parse_verification_type_info = function(bytes_array, constant_pool) {
      var cls, tag, tag_to_type;
      tag = bytes_array.get_uint(1);
      if (tag === 7) {
        cls = constant_pool.get(bytes_array.get_uint(2)).deref();
        return 'class ' + (/\w/.test(cls[0]) ? cls : "\"" + cls + "\"");
      } else {
        tag_to_type = ['bogus', 'int', 'float', 'double', 'long', 'null', 'this', 'object', 'uninitialized'];
        return tag_to_type[tag];
      }
    };

    StackMapTable.prototype.disassemblyOutput = function() {
      var entry, rv, _i, _len, _ref1;
      rv = "  StackMapTable: number_of_entries = " + this.num_entries + "\n";
      _ref1 = this.entries;
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        entry = _ref1[_i];
        rv += "   frame_type = " + entry.frame_type + " /* " + entry.frame_name + " */\n";
        if (entry.offset_delta != null) {
          rv += "     offset_delta = " + entry.offset_delta + "\n";
        }
        if (entry.locals != null) {
          rv += "     locals = [ " + (entry.locals.join(', ')) + " ]\n";
        }
        if (entry.stack != null) {
          rv += "     stack = [ " + (entry.stack.join(', ')) + " ]\n";
        }
      }
      return rv;
    };

    return StackMapTable;

  })();

  LocalVariableTable = (function() {

    function LocalVariableTable() {}

    LocalVariableTable.prototype.name = 'LocalVariableTable';

    LocalVariableTable.prototype.parse = function(bytes_array, constant_pool) {
      var i;
      this.num_entries = bytes_array.get_uint(2);
      return this.entries = (function() {
        var _i, _ref1, _results;
        _results = [];
        for (i = _i = 0, _ref1 = this.num_entries; _i < _ref1; i = _i += 1) {
          _results.push(this.parse_entries(bytes_array, constant_pool));
        }
        return _results;
      }).call(this);
    };

    LocalVariableTable.prototype.parse_entries = function(bytes_array, constant_pool) {
      return {
        start_pc: bytes_array.get_uint(2),
        length: bytes_array.get_uint(2),
        name: constant_pool.get(bytes_array.get_uint(2)).value,
        descriptor: constant_pool.get(bytes_array.get_uint(2)).value,
        ref: bytes_array.get_uint(2)
      };
    };

    LocalVariableTable.prototype.disassemblyOutput = function() {
      var entry, rv, _i, _len, _ref1;
      rv = "  LocalVariableTable:\n   Start  Length  Slot  Name   Signature\n";
      _ref1 = this.entries;
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        entry = _ref1[_i];
        rv += "   " + entry.start_pc + "      " + entry.length + "      " + entry.ref;
        rv += "" + entry.name + "      " + entry.descriptor + "\n";
      }
      return rv;
    };

    return LocalVariableTable;

  })();

  Exceptions = (function() {

    function Exceptions() {}

    Exceptions.prototype.name = 'Exceptions';

    Exceptions.prototype.parse = function(bytes_array, constant_pool) {
      var exc_refs, i, ref;
      this.num_exceptions = bytes_array.get_uint(2);
      exc_refs = (function() {
        var _i, _ref1, _results;
        _results = [];
        for (i = _i = 0, _ref1 = this.num_exceptions; _i < _ref1; i = _i += 1) {
          _results.push(bytes_array.get_uint(2));
        }
        return _results;
      }).call(this);
      return this.exceptions = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = exc_refs.length; _i < _len; _i++) {
          ref = exc_refs[_i];
          _results.push(constant_pool.get(ref).deref());
        }
        return _results;
      })();
    };

    return Exceptions;

  })();

  InnerClasses = (function() {

    function InnerClasses() {}

    InnerClasses.prototype.name = 'InnerClasses';

    InnerClasses.prototype.parse = function(bytes_array, constant_pool) {
      var i, num_classes;
      num_classes = bytes_array.get_uint(2);
      return this.classes = (function() {
        var _i, _results;
        _results = [];
        for (i = _i = 0; _i < num_classes; i = _i += 1) {
          _results.push(this.parse_class(bytes_array, constant_pool));
        }
        return _results;
      }).call(this);
    };

    InnerClasses.prototype.parse_class = function(bytes_array, constant_pool) {
      return {
        inner_info_index: bytes_array.get_uint(2),
        outer_info_index: bytes_array.get_uint(2),
        inner_name_index: bytes_array.get_uint(2),
        inner_access_flags: bytes_array.get_uint(2)
      };
    };

    return InnerClasses;

  })();

  ConstantValue = (function() {

    function ConstantValue() {}

    ConstantValue.prototype.name = 'ConstantValue';

    ConstantValue.prototype.parse = function(bytes_array, constant_pool) {
      this.ref = bytes_array.get_uint(2);
      return this.value = constant_pool.get(this.ref).value;
    };

    return ConstantValue;

  })();

  Synthetic = (function() {

    function Synthetic() {}

    Synthetic.prototype.name = 'Synthetic';

    Synthetic.prototype.parse = function() {};

    return Synthetic;

  })();

  Deprecated = (function() {

    function Deprecated() {}

    Deprecated.prototype.name = 'Deprecated';

    Deprecated.prototype.parse = function() {};

    return Deprecated;

  })();

  Signature = (function() {

    function Signature() {}

    Signature.prototype.name = 'Signature';

    Signature.prototype.parse = function(bytes_array, constant_pool) {
      var ref;
      ref = bytes_array.get_uint(2);
      return this.sig = constant_pool.get(ref).value;
    };

    return Signature;

  })();

  RuntimeVisibleAnnotations = (function() {

    function RuntimeVisibleAnnotations() {}

    RuntimeVisibleAnnotations.prototype.name = 'RuntimeVisibleAnnotations';

    RuntimeVisibleAnnotations.prototype.parse = function(bytes_array, constant_pool, attr_len) {
      return this.raw_bytes = bytes_array.read(attr_len);
    };

    return RuntimeVisibleAnnotations;

  })();

  AnnotationDefault = (function() {

    function AnnotationDefault() {}

    AnnotationDefault.prototype.name = 'AnnotationDefault';

    AnnotationDefault.prototype.parse = function(bytes_array, constant_pool, attr_len) {
      return this.raw_bytes = bytes_array.read(attr_len);
    };

    return AnnotationDefault;

  })();

  EnclosingMethod = (function() {

    function EnclosingMethod() {}

    EnclosingMethod.prototype.name = 'EnclosingMethod';

    EnclosingMethod.prototype.parse = function(bytes_array, constant_pool) {
      var method_ref;
      this.enc_class = constant_pool.get(bytes_array.get_uint(2)).deref();
      method_ref = bytes_array.get_uint(2);
      if (method_ref > 0) {
        return this.enc_method = constant_pool.get(method_ref).deref();
      }
    };

    return EnclosingMethod;

  })();

  root.make_attributes = function(bytes_array, constant_pool) {
    var attr, attr_len, attr_types, attrs, i, name, new_len, num_attrs, old_len, _i;
    attr_types = {
      'Code': Code,
      'LineNumberTable': LineNumberTable,
      'SourceFile': SourceFile,
      'StackMapTable': StackMapTable,
      'LocalVariableTable': LocalVariableTable,
      'ConstantValue': ConstantValue,
      'Exceptions': Exceptions,
      'InnerClasses': InnerClasses,
      'Synthetic': Synthetic,
      'Deprecated': Deprecated,
      'Signature': Signature,
      'RuntimeVisibleAnnotations': RuntimeVisibleAnnotations,
      'AnnotationDefault': AnnotationDefault,
      'EnclosingMethod': EnclosingMethod
    };
    num_attrs = bytes_array.get_uint(2);
    attrs = [];
    for (i = _i = 0; _i < num_attrs; i = _i += 1) {
      name = constant_pool.get(bytes_array.get_uint(2)).value;
      attr_len = bytes_array.get_uint(4);
      if (attr_types[name] != null) {
        attr = new attr_types[name];
        old_len = bytes_array.size();
        attr.parse(bytes_array, constant_pool, attr_len);
        new_len = bytes_array.size();
        if (old_len - new_len !== attr_len) {
          bytes_array.skip(attr_len - old_len + new_len);
        }
        attrs.push(attr);
      } else {
        bytes_array.skip(attr_len);
      }
    }
    return attrs;
  };

}).call(this);
