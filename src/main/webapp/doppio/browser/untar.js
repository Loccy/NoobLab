// Generated by CoffeeScript 1.3.3
(function() {
  var asyncExecute, data, fs, octal2num, root, shift_file, util, _ref;

  root = this;

  util = require('../src/util');

  asyncExecute = (_ref = this.asyncExecute) != null ? _ref : (require('./util')).asyncExecute;

  "use strict";


  root.untar = function(bytes, cb, done_cb) {
    var next_file;
    next_file = function() {
      var body, path, percent, _ref1;
      _ref1 = shift_file(bytes), path = _ref1[0], body = _ref1[1];
      percent = bytes.pos() / bytes.size();
      cb(percent, path, body);
      if (bytes.peek() !== 0) {
        return asyncExecute(next_file);
      } else {
        return typeof done_cb === "function" ? done_cb() : void 0;
      }
    };
    return asyncExecute(next_file, 0);
  };

  shift_file = function(bytes) {
    var body, file, fname, fullname, header, prefix, size;
    header = bytes.read(512);
    fname = util.bytes2str(header.slice(0, 100));
    size = octal2num(header.slice(124, 124 + 11));
    prefix = util.bytes2str(header.slice(345, 345 + 155));
    fullname = prefix ? "" + prefix + "/" + fname : fname;
    body = bytes.read(Math.ceil(size / 512) * 512);
    file = body.slice(0, size);
    return [fullname, file];
  };

  octal2num = function(bytes) {
    var b, digit, idx, msd, num, _i, _len;
    num = 0;
    msd = bytes.length - 1;
    for (idx = _i = 0, _len = bytes.length; _i < _len; idx = ++_i) {
      b = bytes[idx];
      digit = parseInt(String.fromCharCode(b));
      num += digit * Math.pow(8, msd - idx);
    }
    return num;
  };

  if ((typeof module !== "undefined" && module !== null) && !module.parent) {
    fs = require('fs');
    data = new util.BytesArray(util.bytestr_to_array(fs.readFileSync('/dev/stdin', 'binary')));
    root.untar(data, function(percent, path, file) {
      return console.log(path);
    });
  }

}).call(this);
