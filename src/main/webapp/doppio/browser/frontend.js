// Generated by CoffeeScript 1.3.3
// PNMOD - make it accessible!
/*(function() { */
  var class_cache, commandCompletions, commands, controller, defaultFile, editor, fetch_rhino, fileNameCompletions, longestCommmonPrefix, preload, process_bytecode, progress, raw_cache, read_classfile, root, stdout, tabComplete, try_path, user_input,
    __slice = [].slice;

  root = this;

  "use strict";


  stdout = null;

  user_input = null;

  controller = null;

  editor = null;

  progress = null;

  class_cache = {};

  raw_cache = {};
  
  // PNMOD for all stuff below to end of Rhino


  preload = function() {
    var data, done, file_count, on_complete, start_untar, update_bar;
    try {
      data = node.fs.readFileSync("/home/doppio/browser/mini-rt.tar");
    } catch (e) {
      console.error(e);
    }
    if (data != null) {
      file_count = 0;
      done = false;
      start_untar = (new Date).getTime();
      on_complete = function() {
        var end_untar;
        end_untar = (new Date).getTime();
        console.log("Untarring took a total of " + (end_untar - start_untar) + "ms.");
        $('#overlay').fadeOut('slow');
        $('#progress-container').fadeOut('slow');
        return $('#console').click();
      };
      update_bar = _.throttle((function(percent, path) {
        var bar, display_perc, preloading_file;
        bar = $('#progress > .bar');
        preloading_file = $('#preloading-file');
        display_perc = Math.min(Math.ceil(percent * 100), 100);
        bar.width("" + display_perc + "%", 150);
        return preloading_file.text(display_perc < 100 ? "Loading " + path : "Done!");
      }));
      return untar(new util.BytesArray(util.bytestr_to_array(data)), (function(percent, path, file) {
        var base, base_dir, cls, ext, _ref;
        update_bar(percent, path);
        raw_cache[path] = file;
        base_dir = 'vendor/classes/';
        _ref = path.split('.'), base = _ref[0], ext = _ref[1];
        if (ext !== 'class') {
          if (percent === 100) {
            on_complete();
          }
          return;
        }
        file_count++;
        cls = base.substr(base_dir.length);
        return asyncExecute((function() {
          node.fs.writeFileSync(path, util.array_to_bytestr(file), true);
          class_cache[cls] = new ClassFile(file);
          if (--file_count === 0 && done) {
            return on_complete();
          }
        }), 0);
      }), function() {
        done = true;
        if (file_count === 0) {
          return on_complete();
        }
      });
    }
  };
/*
  fetch_rhino = function() {
    var data;
    try {
      data = node.fs.readFileSync("/home/doppio/vendor/classes/com/sun/tools/script/shell/Main.class");
    } catch (e) {
      console.error(e);
    }
    if (data != null) {
      return class_cache['!rhino'] = process_bytecode(data);
    }
  }; */

  try_path = function(path) {
    try {
      return util.bytestr_to_array(node.fs.readFileSync(path));
    } catch (e) {
      return null;
    }
  };

  read_classfile = function(cls) {
    var fullpath, path, _i, _len, _ref;
    if (class_cache[cls] == null) {
      _ref = jvm.classpath;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        path = _ref[_i];
        fullpath = "" + path + cls + ".class";
        if (fullpath in raw_cache) {
          if (raw_cache[fullpath] === null) {
            continue;
          }
          class_cache[cls] = new ClassFile(raw_cache[fullpath]);
          break;
        }
        raw_cache[fullpath] = try_path(fullpath);
        if (raw_cache[fullpath] != null) {
          class_cache[cls] = new ClassFile(raw_cache[fullpath]);
          break;
        }
      }
    }
    return class_cache[cls];
  };

  root.read_raw_class = function(path) {
    var data;
    if (raw_cache[path] == null) {
      data = try_path(path);
      if (data != null) {
        raw_cache[path] = data;
      }
    }
    return raw_cache[path];
  };

  process_bytecode = function(bytecode_string) {
    var bytes_array;
    bytes_array = util.bytestr_to_array(bytecode_string);
    return new ClassFile(bytes_array);
  };
  
  function doCommand(line) {
        var args, cmd, handler, _ref;
        _ref = line.trim().split(/\s+/), cmd = _ref[0], args = 2 <= _ref.length ? __slice.call(_ref, 1) : [];
        if (cmd === '') return true;
        handler = commands[cmd];
        try {
          if (handler != null) {
            return handler(args);
          } else {
            return "Unknown command '" + cmd + "'. Enter 'help' for a list of commands.";
          }
        } catch (e) {
          stdout(e.toString(), 'error');
          throw e;
        }
      }

// PNMOD - all remmed out stuff below
  $(document).ready(function() {
    var /* close_editor,*/ jqconsole;
    /*
    editor = $('#editor');
    $('#file').change(function(ev) {
      var f, file_fcn, files_uploaded, num_files, _i, _len, _ref;
      if (typeof FileReader === "undefined" || FileReader === null) {
        controller.message("Your browser doesn't support file loading.\nTry using the editor to create files instead.", "error");
        return $('#console').click();
      }
      num_files = ev.target.files.length;
      files_uploaded = 0;
      controller.message("Uploading " + num_files + " files...\n", 'success', true);
      file_fcn = (function(f) {
        var ext, isClass, reader;
        reader = new FileReader;
        reader.onerror = function(e) {
          switch (e.target.error.code) {
            case e.target.error.NOT_FOUND_ERR:
              return alert("404'd");
            case e.target.error.NOT_READABLE_ERR:
              return alert("unreadable");
            case e.target.error.SECURITY_ERR:
              return alert("only works with --allow-file-access-from-files");
          }
        };
        ext = f.name.split('.')[1];
        isClass = ext === 'class';
        reader.onload = function(e) {
          files_uploaded++;
          node.fs.writeFileSync(node.process.cwd() + '/' + f.name, e.target.result);
          controller.message("[" + files_uploaded + "/" + num_files + "] File '" + f.name + "' saved.\n", 'success', files_uploaded !== num_files);
          if (isClass) {
            if (typeof editor.getSession === "function") {
              editor.getSession().setValue("/*\n * Binary file: " + f.name + "\n ");
            }
          } else {
            if (typeof editor.getSession === "function") {
              editor.getSession().setValue(e.target.result);
            }
          }
          return $('#console').click();
        };
        if (isClass) {
          return reader.readAsBinaryString(f);
        } else {
          return reader.readAsText(f);
        }
      });
      _ref = ev.target.files;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        f = _ref[_i];
        file_fcn(f);
      }
    }); */
    jqconsole = $('#console');
    controller = jqconsole.console({
      promptLabel: 'doppio > ',
      /*commandHandle: function(line) {
      /*  var a, args, cmd, handler, _ref;
        _ref = line.trim().split(/\s+/), cmd = _ref[0], args = 2 <= _ref.length ? __slice.call(_ref, 1) : [];
        if (cmd === '') {
          return true;
        }
        handler = commands[cmd];
        try {
          if (handler != null) {
            return handler((function() {
              var _i, _len, _results;
              _results = [];
              for (_i = 0, _len = args.length; _i < _len; _i++) {
                a = args[_i];
                if (a.length > 0) {
                  _results.push(a.trim());
                }
              }
              return _results;
            })());
          } else {
            return "Unknown command '" + cmd + "'. Enter 'help' for a list of commands.";
          }
        } catch (e) {
          return controller.message(e.toString(), 'error');
        }
      },*/
      //tabComplete: tabComplete,
      autofocus: true,
      animateScroll: true
      //promptHistory: true,
      //welcomeMessage: "Welcome to Doppio! You may wish to try the following Java programs:\n  java classes/test/FileRead\n  java classes/demo/Fib <num>\n  java classes/demo/Chatterbot\n  java classes/demo/RegexTestHarness\n  java classes/demo/Lzw c Hello.txt hello.lzw (compress)\n  java classes/demo/Lzw d hello.lzw hello (decompress)\n  java classes/demo/DiffPrint Hello.txt hello\n\nWe support the stock Sun Java Compiler:\n  javac classes/test/FileRead.java\n  javac classes/demo/Fib.java\n\nAnd we can even run Rhino, the Java-based JS engine!\n  rhino\n\nText files can be edited by typing `edit [filename]`.\n\nYou can also upload your own files using the uploader above the top-right\ncorner of the console.\n\nEnter 'help' for full a list of commands. Ctrl-D is EOF."
    });
    stdout = function(str) {
      return controller.message(str, '', true);
    };
    user_input = function(n_bytes, resume) {
      var oldHandle, oldPrompt;
      oldPrompt = controller.promptLabel;
      controller.promptLabel = '';
      controller.reprompt();
      oldHandle = controller.commandHandle;
      return controller.commandHandle = function(line) {
        var i;
        controller.commandHandle = oldHandle;
        controller.promptLabel = oldPrompt;
        if (line === '\0') {
          return resume(0);
        } else {
          line += "\n";
          return resume((function() {
            var _i, _ref, _results;
            _results = [];
            for (i = _i = 0, _ref = Math.min(n_bytes, line.length); _i < _ref; i = _i += 1) {
              _results.push(line.charCodeAt(i));
            }
            return _results;
          })());
        }
      };
    };
    close_editor = function() {
      return $('#ide').fadeOut('fast', function() {
        return $('#console').fadeIn('fast').click();
      });
    };
    $('#save_btn').click(function(e) {
      var contents, fname;
      fname = $('#filename').val();
      contents = editor.getSession().getValue();
      if (contents[contents.length - 1] !== '\n') {
        contents += '\n';
      }
      node.fs.writeFileSync(fname, contents);
      controller.message("File saved as '" + fname + "'.", 'success');
      close_editor();
      return e.preventDefault();
    });
    $('#close_btn').click(function(e) {
      close_editor();
      return e.preventDefault();
    });
    // PNMOD
    //preload();
    //return fetch_rhino();
  });

  commands = {
    javac: function(args, cb) {
      var rs;
      jvm.classpath = ["./", "/home/doppio/vendor/classes/", "/home/doppio"];
      rs = new runtime.RuntimeState(stdout, user_input, read_classfile);
      jvm.run_class(rs, 'classes/util/Javac', args, function() {
        return controller.reprompt();
      });
      return null;
    },
    java: function(args, cb) {
      var class_args, class_name, rs;
      if (!(args[0] != null) || (args[0] === '-classpath' && args.length < 3)) {
        return "Usage: java [-classpath path1:path2...] class [args...]";
      }
      if (args[0] === '-classpath') {
        jvm.classpath = args[1].split(':');
        jvm.classpath.push("/home/doppio/vendor/classes/");
        class_name = args[2];
        class_args = args.slice(3);
      } else {
        jvm.classpath = ["./", "/home/doppio/vendor/classes/"];
        class_name = args[0];
        class_args = args.slice(1);
      }
      rs = new runtime.RuntimeState(stdout, user_input, read_classfile);
      jvm.run_class(rs, class_name, class_args, function() {
        // PNMOD
        // did we succeed or fail...?
        if (parent.javaruntimeerror)
        {
            var exceptionTarget = $("div#main div#console div:contains('Exception')");
            // suck out the error
            var junk = exceptionTarget.text().replace(/\xa0/g," ");
            var errortext = "Exception in thread"+junk.substring(junk.indexOf('Exception in thread')+19);
            exceptionTarget.text(junk.replace(errortext,""));
            return parent.javaRuntimeError(errortext);
        }
        else
        {
            return parent.javaSuccessfulRun();
        }
        //return controller.reprompt();
      });
      return null;
    },
    test: function(args) {
      if (args[0] == null) {
        return "Usage: test all|[class(es) to test]";
      }
      if (args[0] === 'all') {
        testing.run_tests([], stdout, true, false, true, function() {
          return controller.reprompt();
        });
      } else {
        testing.run_tests(args, stdout, true, false, true, function() {
          return controller.reprompt();
        });
      }
      return null;
    },
    javap: function(args) {
      var raw_data;
      if (args[0] == null) {
        return "Usage: javap class";
      }
      try {
        raw_data = node.fs.readFileSync("" + args[0] + ".class");
      } catch (e) {
        return ["Could not find class '" + args[0] + "'.", 'error'];
      }
      disassembler.disassemble(process_bytecode(raw_data));
      return null;
    },
    rhino: function(args, cb) {
      var rs;
      jvm.classpath = ["./", "/home/doppio/vendor/classes/"];
      rs = new runtime.RuntimeState(stdout, user_input, read_classfile);
      jvm.run_class(rs, '!rhino', args, function() {
        return controller.reprompt();
      });
      return null;
    },
    list_cache: function() {
      var name, val;
      return ((function() {
        var _results;
        _results = [];
        for (name in raw_cache) {
          val = raw_cache[name];
          _results.push((val != null ? '' : '-') + name);
        }
        return _results;
      })()).join('\n');
    },
    clear_cache: function(args) {
      raw_cache = {};
      class_cache = {};
      return "Cache cleared.";
    },
    ls: function(args) {
      var d, read_dir;
      read_dir = function(dir) {
        return node.fs.readdirSync(dir).sort().join('\n');
      };
      if (args.length === 0) {
        return read_dir('.');
      } else if (args.length === 1) {
        return read_dir(args[0]);
      } else {
        return ((function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = args.length; _i < _len; _i++) {
            d = args[_i];
            _results.push("" + d + ":\n" + (read_dir(d)) + "\n");
          }
          return _results;
        })()).join('\n');
      }
    },
    edit: function(args) {
      var data;
      try {
        data = args[0] != null ? node.fs.readFileSync(args[0]) : defaultFile;
      } catch (e) {
        data = defaultFile;
      }
      $('#console').fadeOut('fast', function() {
        var JavaMode, TextMode, ext, _ref;
        $('#filename').val(args[0]);
        $('#ide').fadeIn('fast');
        editor = ace.edit('source');
        editor.setTheme('ace/theme/twilight');
        ext = (_ref = args[0]) != null ? _ref.split('.')[1] : void 0;
        if (ext === 'java' || !(args[0] != null)) {
          JavaMode = require("ace/mode/java").Mode;
          editor.getSession().setMode(new JavaMode);
        } else {
          TextMode = require("ace/mode/text").Mode;
          editor.getSession().setMode(new TextMode);
        }
        return editor.getSession().setValue(data);
      });
      return true;
    },
    cat: function(args) {
      var fname;
      fname = args[0];
      if (fname == null) {
        return "Usage: cat <file>";
      }
      try {
        return node.fs.readFileSync(fname);
      } catch (e) {
        return "ERROR: " + fname + " does not exist.";
      }
    },
    mv: function(args) {
      if (args.length < 2) {
        return "Usage: mv <from-file> <to-file>";
      }
      try {
        node.fs.renameSync(args[0], args[1]);
      } catch (e) {
        return "Invalid arguments.";
      }
      return true;
    },
    cd: function(args) {
      if (args.length > 1) {
        return "Usage: cd <directory>";
      }
      if (args.length === 0) {
        args.push("~");
      }
      try {
        node.process.chdir(args[0]);
      } catch (e) {
        return "Invalid directory.";
      }
      return true;
    },
    rm: function(args) {
      var fname, fnames, fstat, _i, _len;
      if (args[0] == null) {
        return "Usage: rm <file>";
      }
      if (args[0] === '*') {
        fnames = node.fs.readdirSync('.');
        for (_i = 0, _len = fnames.length; _i < _len; _i++) {
          fname = fnames[_i];
          fstat = node.fs.statSync(fname);
          if (fstat.is_directory) {
            return "ERROR: '" + fname + "' is a directory.";
          }
          node.fs.unlinkSync(fname);
        }
      } else {
        node.fs.unlinkSync(args[0]);
      }
      return true;
    },
    emacs: function() {
      return "Try 'vim'.";
    },
    vim: function() {
      return "Try 'emacs'.";
    },
    time: function(args) {
      var start;
      start = (new Date).getTime();
      console.profile(args[0]);
      controller.onreprompt = function() {
        var end;
        controller.onreprompt = null;
        console.profileEnd();
        end = (new Date).getTime();
        return controller.message("\nCommand took a total of " + (end - start) + "ms to run.\n", '', true);
      };
      return commands[args.shift()](args);
    },
    profile: function(args) {
      var count, duration, runs, time_once;
      count = 0;
      runs = 5;
      duration = 0;
      time_once = function() {
        var start;
        start = (new Date).getTime();
        controller.onreprompt = function() {
          var end;
          if (!(count < runs)) {
            controller.onreprompt = null;
            controller.message("\n" + args[0] + " took an average of " + (duration / runs) + "ms.\n", '', true);
            return;
          }
          end = (new Date).getTime();
          if (count++ === 0) {
            return time_once();
          }
          duration += end - start;
          return time_once();
        };
        return commands[args.shift()](args);
      };
      return time_once();
    },
    help: function(args) {
      return "Ctrl-D is EOF.\n\nJava-related commands:\n  javac <source file>    -- Invoke the Java 6 compiler.\n  java <class> [args...] -- Run with command-line arguments.\n  javap <class>          -- Display disassembly.\n  time                   -- Measure how long it takes to run a command.\n\nFile management:\n  cat <file>             -- Display a file in the console.\n  edit <file>            -- Edit a file.\n  ls <dir>               -- List files.\n  mv <src> <dst>         -- Move / rename a file.\n  rm <file>              -- Delete a file.\n  cd <dir>               -- Change current directory.\n\nCache management:\n  list_cache             -- List the cached class files.\n  clear_cache            -- Clear the cached class files.";
    }
  };

  tabComplete = function() {
    var args, getCompletions, prefix, promptText;
    promptText = controller.promptText();
    args = promptText.split(/\s+/);
    getCompletions = function(args) {
      if (args.length === 1) {
        return commandCompletions(args[0]);
      } else if (args[0] === 'time') {
        return getCompletions(args.slice(1));
      } else {
        return fileNameCompletions(args[0], args);
      }
    };
    prefix = longestCommmonPrefix(getCompletions(args));
    if (prefix === '') {
      return;
    }
    promptText = promptText.substr(0, promptText.length - util.last(args).length);
    return controller.promptText(promptText + prefix);
  };

  commandCompletions = function(cmd) {
    var handler, name, _results;
    _results = [];
    for (name in commands) {
      handler = commands[name];
      if (name.substr(0, cmd.length) === cmd) {
        _results.push(name);
      }
    }
    return _results;
  };

  fileNameCompletions = function(cmd, args) {
    var chopExt, completions, dirList, dirPfx, isDir, item, lastSlash, searchPfx, toComplete, validExtension, _i, _len, _ref;
    validExtension = function(fname) {
      var dot, ext;
      dot = fname.lastIndexOf('.');
      ext = dot === -1 ? '' : fname.slice(dot + 1);
      if (cmd === 'javac') {
        return ext === 'java';
      } else if (cmd === 'javap' || cmd === 'java') {
        return ext === 'class';
      } else {
        return true;
      }
    };
    chopExt = args.length === 2 && (cmd === 'javap' || cmd === 'java');
    toComplete = util.last(args);
    lastSlash = toComplete.lastIndexOf('/');
    if (lastSlash >= 0) {
      dirPfx = toComplete.slice(0, lastSlash + 1);
      searchPfx = toComplete.slice(lastSlash + 1);
    } else {
      dirPfx = '';
      searchPfx = toComplete;
    }
    try {
      dirList = node.fs.readdirSync(dirPfx === '' ? '.' : dirPfx);
      dirList.push('..');
      dirList.push('.');
    } catch (e) {
      return [];
    }
    completions = [];
    for (_i = 0, _len = dirList.length; _i < _len; _i++) {
      item = dirList[_i];
      isDir = (_ref = node.fs.statSync(dirPfx + item)) != null ? _ref.isDirectory() : void 0;
      if (!(validExtension(item) || isDir)) {
        continue;
      }
      if (item.slice(0, searchPfx.length) === searchPfx) {
        if (isDir) {
          completions.push(dirPfx + item + '/');
        } else if (cmd !== 'cd') {
          completions.push(dirPfx + (chopExt ? item.split('.', 1)[0] : item));
        }
      }
    }
    return completions;
  };

  longestCommmonPrefix = function(lst) {
    return lst.join(' ').match(/^(\S*)\S*(?: \1\S*)*$/i)[1];
  };

  defaultFile = "class Test {\n  public static void main(String[] args) {\n    // enter code here\n  }\n}";

// PNMOD
/*}).call(this);*/
