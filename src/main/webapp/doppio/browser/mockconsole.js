// Generated by CoffeeScript 1.3.3
(function() {
  "use strict";

  var $;

  $ = jQuery;

  $.fn.console = function(config) {
    var bufferSize, commands, complete, container, error, errorCommandHandle, extern, getErrorDetails, getFromServer, inner, isComplete, message, outBuffer, postToServer, printErrorInBrowser, printInBrowser, runNextCommand, sendBufferToServer, uploading, _ref, _ref1, _ref2;
    outBuffer = "";
    bufferSize = 1024;
    commands = [];
    uploading = false;
    isComplete = false;
    getErrorDetails = function(url, type, data, textStatus, errorThrown) {
      return "Error during HTTP " + type + " to server.\n" + "---------------------------------\n" + "Details:\n" + "  URL: " + url + "\n" + "  Error Type: " + textStatus + "\n" + "  Additional Error Info: " + errorThrown + "\n" + "  Data: '" + data + "'\n";
    };
    getFromServer = function(url, doneFn) {
      return $.ajax({
        url: url
      }).done(doneFn).fail(function(data, textStatus, errorThrown) {
        return printErrorInBrowser(getErrorDetails(url, "POST", data, textStatus, errorThrown));
      });
    };
    postToServer = function(url, data, doneFn) {
      return $.ajax({
        type: "POST",
        url: url,
        data: outBuffer
      }).done(doneFn).fail(function(data, textStatus, errorThrown) {
        return printErrorInBrowser(getErrorDetails(url, "POST", data, textStatus, errorThrown));
      });
    };
    sendBufferToServer = function() {
      if (outBuffer.length !== 0 && !uploading) {
        uploading = true;
        postToServer("message", outBuffer, (function() {
          uploading = false;
          if (outBuffer.length > bufferSize) {
            return sendBufferToServer();
          }
        }));
        return outBuffer = "";
      }
    };
    printInBrowser = function(msg, className) {
      var mesg;
      mesg = $('<div class="jquery-console-message"></div>');
      if (className) {
        mesg.addClass(className);
      }
      mesg.text(msg);
      mesg.hide();
      inner.append(mesg);
      return mesg.show();
    };
    printErrorInBrowser = function(msg) {
      return printInBrowser(msg, "jquery-console-message-error");
    };
    error = function(text) {
      printErrorInBrowser(text);
      postToServer("error", text);
      return complete();
    };
    complete = function() {
      if (isComplete) {
        return;
      }
      if (!uploading) {
        isComplete = true;
        printInBrowser("\nTest complete. The browser will be killed now. Have " + "a wonderful day! :)\n");
        postToServer("complete");
        return commands = [];
      } else {
        return setTimeout(complete, 10);
      }
    };
    message = function(text) {
      outBuffer += text;
      if (outBuffer.length >= bufferSize) {
        return sendBufferToServer();
      }
    };
    runNextCommand = function() {
      var command, ret;
      sendBufferToServer();
      if (commands.length > 0) {
        command = commands.shift();
        printInBrowser(extern.promptLabel + command);
        ret = extern.commandHandle(command);
        if (typeof ret === "boolean") {
          if (ret) {
            return extern.reprompt();
          } else {
            error("Command \"" + command + "\" failed.");
            return extern.reprompt();
          }
        } else if (typeof ret === "string") {
          return extern.message(ret + "\n");
        } else if (typeof ret === "object" && ret.length) {
          return extern.message(ret + "\n");
        } else {
          return extern.reprompt();
        }
      } else {
        return complete();
      }
    };
    extern = {};
    extern.promptLabel = (_ref = config.promptLabel) != null ? _ref : "> ";
    errorCommandHandle = function(line) {
      return error("Command handle called before it was set.");
    };
    extern.commandHandle = (_ref1 = config.commandHandle) != null ? _ref1 : errorCommandHandle;
    extern.onreprompt = (_ref2 = config.onreprompt) != null ? _ref2 : null;
    extern.reset = function() {};
    extern.notice = function() {};
    extern.message = function(msg, type, noreprompt) {
      if ($.isArray(msg)) {
        message(msg[0]);
      } else {
        message(msg);
      }
      if (!noreprompt) {
        return extern.reprompt();
      }
    };
    extern.reprompt = function() {
      if (typeof extern.onreprompt === "function") {
        extern.onreprompt();
      }
      return setTimeout(runNextCommand, 10);
    };
    extern.promptText = function(text) {
      return error("PromptText called during a non-interactive test.");
    };
    container = $(this);
    inner = $('<pre class="jquery-console-inner"></div>');
    container.append(inner);
    printInBrowser("Doppio Automated Benchmark Mode\n" + "-------------------------------\n" + "Doppio will only print fatal errors and running commands to this " + "console. All other output is sent to the benchmark server.\n\n");
    getFromServer("commands", (function(data) {
      commands = $.parseJSON(data);
      if (!$.isArray(commands)) {
        return error("Retrieved commands are not in an array format.");
      }
    }));
    container.click(function() {
      return extern.reprompt();
    });
    return extern;
  };

}).call(this);
